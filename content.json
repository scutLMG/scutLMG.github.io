{"pages":[{"title":"","text":"瞎扯 var gitalk = new Gitalk({ clientID: 'f9f87445f8be567cb055', clientSecret: '120a5a3c9fb951390aadae2b55909cdb6721ce28', id: '20210709', repo: 'selfTalk_db', owner: 'scutLMG', admin: \"scutLMG\", createIssueManually: true, distractionFreeMode: false }) gitalk.render('gitalk-container')","link":"/talktalk/index.html"},{"title":"","text":"中国2098-太阳照常升起，范文南 About就随便整的一博客，没啥时间，要学习的。有空就写点 关于页也许还得写点关于我的信息，不知道写什么。","link":"/about/index.html"},{"title":"","text":"console.log(\"Test for judging\")","link":"/about/test.js"},{"title":"【电影】- 牧马人","text":"导演：谢晋 年份：1982 主演：朱时茂、丛珊 改编自小说《灵与肉》 写影评或者说自己的感想、电影记录这件事一直都有在零零散散在做，但没有留下数据，写完就不知道扔哪里去了，想来想去，弄在博客上好了，希望以后每次看，都能感到当年的我还是幼稚了。 简述 电影主要以小许与老许的北京见面间数日的谈话、交锋展开，在谈话中穿插了小许的回忆，展现了作为“牧马人”的生活，是当时较为常见的线性叙事方式。电影片头唱着敕勒歌，播放草原放牧的剪影。引入主角知识分子许灵均敕勒川放牧二十年的经历和其父归国寻子的故事。主角之父不满封建包办婚姻，抛妻弃子前去美国发展，主角许灵均则因为其父“资本家”的身份，被打成右派，下放劳动。在放牧过程中，劳动人民教会他放牧、生活，也尽力在各种“运动”中保护他免受伤害。他与逃荒来的妻子因牧民的撮合，莫名地开始了先婚后爱的生活，成就了一段佳话。既是对那个年代的伤痕反思，也有对爱情的讨论，对家国情怀，少许金钱、价值观、物质与精神的讨论。尽管对于爱情的看法有着浓厚的时代气息，但其中表现了纯粹而动人的情感，却是在资本发达，物质丰盛的“进步”今日所难以找寻的，所表现的爱情观，哲学观，人民阶级情感，也值得深思。 主要情节开篇是老许和小许的北京相见。朱时茂的演技真不错，欲爸未爸的感情表现拿捏住了。后面的表演还是有一些舞台剧、夸张做作的影子，台词配音、画外音也有时候像朗诵文学作品一样，浓浓的年代感了。 父子相见，交谈不多时，许灵均便回想起当年：自己出生与钟鸣鼎食之家，但因封建包办婚姻的苦果，父亲离开母亲前往美国，不就母亲病逝的经历。当天，他们吃了在当时就要花八十的“天价”晚餐，许灵均很吃惊，又回想起临走前妻子秀芝送别他，嘱托给公公送茶叶蛋以及枸杞，灵均自然拿不出手。晚上的舞会，灵均选择一旁看报纸。一开篇，便展露巨大的差异，而后有些许互不理解，也不奇怪了。 夜晚长谈，灵均说起往事：父亲走后，自己背锅被打成右派，几欲自杀。父亲表达了不安和懊悔，希望灵均理解。 灵均认为自己是一个弃子，是牧民给予他帮助，重新感受到人的温暖。是牧民给自己送饭添衣，耳提面命地教他放牧，在文革中保护自己，才得以有今日的许灵均。（在讲述文革中，干部的话，反映了当时那场运动的混乱。） 第二天，父子前去逛街，父亲买了非常贵重的瓷器，而灵均只买了一个泡菜坛子，因为妻子是四川人，爱吃泡菜。交谈中，父亲的秘书表示在美国婚姻是爱情的坟墓（这句话竟然那个年代的片子就说了），对他们先结婚后恋爱的经历很好奇。 灵均讲起，妻子因家乡闹“运动”，无人劳作，不得已逃荒于此，表姐说的对象恰好摔死了，经郭谝子（剧里念pia，实则是pian，形容花言巧语，夸夸其谈）奔走，撮合了她和许灵均，直接给灵均结婚证都领了。经典高能时刻之一。 笑死，还不信，谝子办事，包给你办妥贴。 接着就是相顾无言，小许请她喝水，继续相顾无言，终于煮的粥开了，吃完之后洗碗，灵均洗碗被抢过，于是他添了热水。几个细节刻画表明起码他不是坏人，然后秀芝就要给家里写信说，有个家了。（进展太快了吧阿sir，要是分段刻画可能更好，不知道原著是咋样的） 这锅粥要是不开，这俩人能坐一天。重要的一锅粥。 当天夜里，灵均喂马回来，在地上睡了，秀芝醒来看到就哭了，灵均就从床头掏出攒的钱和粮票让她拿着回家，秀芝又哭问他是不是嫌她丑，接着就是非常端正的价值观输出了。 接着是结婚补办婚礼的描述了，整个色调都明亮了许多，村民送钱送物，反应淳朴民风。 接着是夫妻生活剪影：灵均外出放牧，秀芝在家脱土坯垒院墙养鸡鸭养儿子；读书认字看电影；送饭等等。没有言说一个爱字，但已经表现出来，爱本来就是不可言说的。 真是男的帅女的美，动作神态也很不错！ 然后到了老许回校观光，偶遇老校工，借其之口讲出：文革结束啦！桌子板凳全平反了！ 自此全片进入伤痕反思、价值讨论交锋篇章：许灵均平反，成为教师。而后便是金钱、人生价值、家国情怀的升华讨论了。灵均正式表明拒绝前往美国的意愿，父子的对话，也是反映当时主流价值观和一定程度对资本主义大本营的想象：钱不是万能的云云。 写太长太流水账了，以后要精炼一点。写到后面都要烂尾了。 情节分析差异发展的不同创造了不同的差异，也许当时的人民只感受到中美的差异巨大，时至今日，我们又该如何面对自己内部的分化呢？ 开篇的送别，牧民与孩子的想象。牧民认为富有的地方，可以天天吃饺子；小孩子觉得没去过的地方里，尽管似乎描述中如此新奇，但没有熟悉的地方里能够给予他熟悉的享乐，可能也并不特别了。 牧民的话，其实与“皇帝耕地，也不过是用金锄头罢？”有异曲同工之妙，也许可以嘲笑这是贫穷蒙蔽了双眼，井底之蛙。但我又觉得，这也很真挚直白地表现了，再穷奢极欲，也不过继续种地！何必成为一个食利者，人生来就该劳动！每天白面馍馍/饺子吃到饱，也不过是表现了欲望的差异罢了。 爱与婚姻尽管爱难以言说，在说出来的同时便对自身进行了否定，但好在爱是存在的。 爱的表达与存在、婚姻是爱情的坟墓吗？ 女性伤痕反思全片有多处直白地表现当时的动乱与浩劫，许的自杀念起，到混乱中受村民保护，到获得政治新生，都在诉说着一场场运动的混乱，无辜的人被卷入，耗费青春，狂热的群众不事生产，使得生产建设严重倒退，无疑不是一场人祸。似乎一句错划便可一笔勾销，实际上更多的是无可奈何，主角表现了依旧积极向上的一面，反思过后，阶级斗争依旧存在，发起一场场不可控的运动的断无可能的了，发展也是必不可少的，但潜藏在一切伟光正，一片繁荣重生之下的暗涌激流，又该以怎样的方式去面对呢？人民会自发前进吗？发展固然继续，但总会有放慢的时候，不远了，我们需要先锋队，需要成为先锋队。 其他感想 电影《列宁在一九一八》，由苏联于1939年发行，金句频出。 别让怜悯的锁链缠住了你！现在正是多么尖锐的斗争。你还是把这种怜悯丢掉吧！他们用眼泪蒙蔽了你的眼睛使你看起是非来就分不清楚。把怜悯丢掉吧！ 同志们，要维持一个政权，比夺取他还要难。我们的革命正在前进，正在发展和成长，可是我们的斗争也在发展着成长着。 人死后尸体可以抬出去，但是旧社会在灭亡了的时候，很可惜，资产阶级的这个尸首，那就不可能把他一下子钉在棺材里埋葬在坟墓里，资产阶级的尸首在我们心里头腐烂着，他把毒气传染给大家，他在发散着臭气！ 同志们你们必须要记住：我们只有一条出路，那就是胜利。还有另外一条路那就是死亡。死亡不属于工人阶级！ 为了她们，我们对待敌人应该是无情的。她们将来生活不会像我们这样，会比我们好的。 面包会有的，牛奶会有的，一切都会有的！ 一些至今已经变成调侃、玩味的台词。（“列宁同志已经不咳嗽了，他已经不发烧了！”，“大家不要挤，让列宁同志先走！”等等） 可能今天还在提的，就剩“面包会有的”了吧，不过说再多也没有用，应该也不会再提了。 其时斯大林掌权，影片中加入了很多为斯大林政治路线服务的历史修正主义情节。1956年苏穗宗玉米晓夫上台后批判斯大林，删去了许多斯大林的镜头。电影里的是译制片，结合电影剧情中此时许尚未结束放牧生活成为牧区教师以及文革时期能够播放的电影不多，可能观看之时在文革结束前，放的应该还是原版。尽管这部老电影与史实多有不合，脸谱化表演的痕迹与宣传意味较浓，但还是值得批判地去看看的。 父亲与秘书跳舞时，许灵均选择出去看报，一个有意思的镜头，他在挑报纸，两个黑哥哥蹦蹦跳跳进去了。反映当时的“国际交流”？两相对比，又与近年的现实来看，反而很可笑，到头来，为了宣传，弄进来的都是些吃补贴玩乐的洋垃圾。需要国际化，但不需要为了国际化而“国际化”，那样太自卑了。 写作总结第一次打算写在博客上，越写越长，还是要考虑精简凝练地写，不然写的时间太长了，有点折磨，最后肯定是草草了事的。 写作模板方面，因为搭建了个人图床，解决了图文博客中图片占用存储空间过大的点，可以继续嫖github又不用担心被邮件警告。可以将图片都转移走了！但有新的问题，配图时不能随意地配，最后还要上传图床用链接代替，有点繁琐，或者又使用占位符占位，之后搜索更替，这样就要基本确定行文结构和图片，还有配图命名也是一件麻烦事。得想个办法。 占位符方面，用特定字符标记方便后续搜索，那么要求字符不常用，发音单一无其他汉字同音，有尅kei歘chua鞥eng覅fiao森sen感觉尅和覅都不错。 命名方面，本来是想以 电影-影名-数字 命名，但是因为删改最终顺序难以确定，以简要来命名又冗长，暂时没有特别好的办法，多写几篇看看。 分析方面，有时候想说的太多，如果与情节分离，先写情节再统一分析，割裂感严重，还经常忘记在哪。边情节边分析又显得很长，不过适当的分段应该可以解决，下次尝试下。同时，分析主要感想就算了，一些细枝末节的，尽管作者已隐匿不在场，可以瞎写，但难免有过度解读的感觉，就不写了吧。 写方面，边打字边思考速度不快，考虑一下语音输入？写太长的问题，虽然感觉已经很长了，尽管要精简凝练，但还是觉得没有表达完整，语言太匮乏了。","link":"/cache/%E3%80%90%E7%94%B5%E5%BD%B1%E3%80%91-%20%E7%89%A7%E9%A9%AC%E4%BA%BA.html"},{"title":"","text":"计划计划Plan plan没什么好说的，先早睡早起再说。 11点睡7点起就算赢。 睡前看点纸质书。 历史，哲学，经济，小说。 收集一点书单，kindle充电，买个淡黄光的小夜灯。 博尔赫斯，俄国文学。 不感兴趣就换。没必要一定要读完。 眼罩，耳塞？ 夜间模式，手机，电脑黄光，尽量不要用到太晚。 可以听有声书。 早起不要刷手机，有早起目标。 背单词？ 健身？ 吃好早餐。 恢复元气。 指定其他计划表。 一口吃不成胖子。 健身增重，到130就算赢，肌肉什么的不重要。 健康 早起可以去跑跑步散散步，买菜？ 增重 增肌 面部皮肤。 先早起。 补水。 如何去除痘印。 减少糖分摄入or消耗平衡？","link":"/cache/%E8%AE%A1%E5%88%92%E8%AE%A1%E5%88%92Plan%20plan.html"},{"title":"","text":"我花了18年时间才能和你坐在一起喝咖啡。我的白领朋友们，如果我是一个初中没毕业就来沪打工的民工，你会和我坐在“星巴克”一起喝咖啡吗？不会，肯定不会。比较我们的成长历程，你会发现，为了一些在你看来唾手可得的东西，我却需要付出巨大的努力。 从我出生的一刻起，我的身份就与你有了天壤之别，因为我只能报农村户口，而你是城市户口。如果我长大以后一直保持农村户口，那么我就无法在城市中找到一份正式工作，无法享受养老保险、医疗保险。你可能会问我：“为什么非要到城市来？农村不很好吗？空气新鲜，又不像城市这么拥挤。”可是农村没有好的医疗条件，去年SARS好像让大家一夜之间发现农村的医疗保健体系竟然如此落后，物质供应也不丰富，因为农民挣的钱少，贵一点儿的东西就买不起，所以商贩也不会进太多货。春节联欢晚会的小品中买得起等离子彩电的农民毕竟是个别现象，绝大多数农民还在为基本的生存而奋斗，于是我要进城，要通过自己的奋斗获得你生下来就拥有的大城市户口。考上大学是我跳出农门的惟一机会。我要刻苦学习，小学升初中，初中升高中，高中考大学，我在独木桥上奋勇搏杀，眼看着周围的同学一批批落马，前面的道路越来越窄，我这个佼佼者心里不知是喜是忧。激烈的竞争让我不敢疏忽，除了学习功课，我无暇顾及业余爱好，学校也没有这些发展个人特长的课程。进入高中的第一天，校长就告诉我们这三年只有一个目标——高考。于是我披星戴月，早上5∶30起床，晚上11∶00睡觉，就连中秋节的晚上，我还在路灯下背政治题。 而你的升学压力要小得多，竞争不是那么激烈，功课也不是很沉重，你可以有充足的时间去发展个人爱好，去读课外读物，去球场挥汗如雨，去野外享受蓝天白云。如果你不想那么辛苦去参加高考，只要成绩不是太差，你可以在高三时有机会获得保送名额，哪怕成绩忒差，也会被“扫”进一所本地三流大学，而那所三流大学我可能也要考到很高的分数才能进去，因为按地区分配的名额中留给上海本地的名额太多了。 我们的考卷一样我们的分数线却不一样，但是当我们都获得录取通知书的时候，所交的学费是一样的。每人每年6000元，四年下来光学费就要2.4万元，再加上住宿费每人每年1500元，还有书本教材费每年1000元、生活费每年4000元（只吃学校食堂），四年总共5万元。2003年上海某大学以“新建的松江校区环境优良”为由，将学费提高到每人每年1万元，这就意味着仅学费一项四年就要4万元，再加上其他费用，总共6.6万元。6.6万元对于一个上海城市家庭来说也许算不上沉重的负担，可是对于一个农村的家庭，这简直是一辈子的积蓄。我的家乡在东部沿海开放省份，是一个农业大省，相比西部内陆省份应该说经济水平还算比较好，但一年辛苦劳作也剩不了几个钱。以供养两个孩子的四口之家为例，除去各种日常必需开支，一个家庭每年最多积蓄3000元，那么6.6万元上大学的费用意味着22年的积蓄！前提是任何一个家庭成员都不能生大病，而且另一个孩子无论学习成绩多么优秀，都必须剥夺他上大学的权利，因为家里只能提供这么多钱。我属于比较幸运的，东拼西凑加上助学贷款终于交齐了第一年的学费，看着那些握着录取通知书愁苦不堪全家几近绝望的同学，我的心中真的不是滋味。教育产业化时代的大学招收的? 我终于可以如愿以偿地在大学校园里汲取知识的养分！努力学习获得奖学金，假期打工挣点生活费，我实在不忍心多拿父母一分钱，那每一分钱都是一滴汗珠掉在地上摔成八瓣挣来的血汗钱啊！ 来到上海这个大都市，我发现与我的同学相比我真是土得掉渣。我不会作画，不会演奏乐器，不认识港台明星，没看过武侠小说，不认得MP3，不知道什么是walkman，为了弄明白营销管理课上讲的“仓储式超市”的概念，我在“麦德隆”好奇地看了一天，我从来没见过如此丰富的商品。 我没摸过计算机，为此我花了半年时间泡在学校机房里学习你在中学里就学会的基础知识和操作技能。我的英语是聋子英语、哑巴英语，我的发音中国人和外国人都听不懂，这也不能怪我，我们家乡没有外教，老师自己都读不准，怎么可能教会学生如何正确发音？基础没打好，我只能再花一年时间矫正我的发音。我真的很羡慕大城市的同学多才多艺，知识面那么广，而我只会读书，我的学生时代只有学习、考试、升学，因为只有考上大学，我才能来到你们中间，才能与你们一起学习，所有的一切都必须服从这个目标。 我可以忍受城市同学的嘲笑，可以几个星期不吃一份荤菜，可以周六周日全天泡在图书馆和自习室，可以在周末自习回来的路上羡慕地看着校园舞厅里的成双成对，可以在寂寞无聊的深夜在操场上一圈圈地奔跑。我想有一天我毕业的时候，我能在这个大都市挣一份工资的时候，我会和你这个生长在都市里的同龄人一样——做一个上海公民，而我的父母也会为我骄傲，因为他们的孩子在大上海工作！ 终于毕业了，在上海工作难找，回到家乡更没有什么就业机会。能幸运地在上海找到工作的应届本科生只有每月2000元左右的工资水平，也许你认为这点钱应该够你零花的了，可是对我来说，我还要租房，还要交水电煤电话费还要还助学贷款，还想给家里寄点钱让弟妹继续读书，剩下的钱只够我每顿吃盖浇饭，我还是不能与你坐在“星巴克”一起喝咖啡！ 如今的我在上海读完了硕士，现在有一份年薪七八万的工作。我奋斗了18年，现在终于可以与你坐在一起喝咖啡。我已经融入到这个国际化大都市中了，与周围的白领朋友没有什么差别。可是我无法忘记奋斗历程中那些艰苦的岁月，无法忘记那些曾经的同学和他们永远无法实现的夙愿。于是我以第一人称的方式写下了上面的文字，这些是最典型的中小城市和农村平民子弟奋斗历程的写照。每每看到正在同命运抗争的学子，我的心里总是会有一种沉重的责任感。 写这篇文章不是为了怨天尤人，这个世界上公平是相对的，这并不可怕，但是对不公平视而不见是非常可怕的。我在上海读硕士的时候，曾经讨论过一个维达纸业的营销案例，我的一位当时曾有三年工作经验，现任一家中外合资公司人事行政经理的同学，提出一个方案：应该让维达纸业开发高档面巾纸产品推向9亿农民市场。我惊讶于她提出这个方案的勇气，当时我问她是否知道农民兄弟吃过饭后如何处理面部油腻，她疑惑地看着我，我用手背在两侧嘴角抹了两下，对如此不雅的动作她投以鄙夷神色。 在一次宏观经济学课上，我的另一同学大肆批判下岗工人和辍学务工务农的少年：“80%是由于他们自己不努力，年轻的时候不学会一门专长，所以现在下岗活该！那些学生可以一边读书一边打工嘛，据说有很多学生一个暑假就能赚几千元，学费还用愁吗？”我的这位同学太不了解贫困地区农村了。 我是70年代中期出生的人，我的同龄人正在逐渐成为社会的中流砥柱，我们的行为将影响社会和经济的发展。把这篇文章送给那些在优越环境中成长起来的年轻人和很久以前曾经吃过苦现在已经淡忘的人，关注社会下层，为了这个世界更公平些，我们应该做些力所能及的事情，让社会责任感驻留我们的头脑。 我花了18年时间才能和你坐在一起喝咖啡。","link":"/cache/%E6%88%91%E8%8A%B1%E4%BA%8618%E5%B9%B4%E6%97%B6%E9%97%B4%E6%89%8D%E8%83%BD%E5%92%8C%E4%BD%A0%E5%9D%90%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%96%9D%E5%92%96%E5%95%A1.html"},{"title":"","text":"欢迎阳和平老师。 谢谢大家。谢谢大家。 对，这个话题是最近引起我的注意了，我也做了一些思考，就近几年就看这个问题，最早还是从《大国崛起》这个电影引起我的注意的，让我感到非常吃惊的是《大国崛起》这个电影，他的思路跟我想象的很不一样，他把大国崛起看成一个非常辉煌的值得羡慕的。 但是我觉得这个本质东西就是说，《大国崛起》其实是各个帝国在瓜分世界，打仗的时候怎么去起来的。这个是，他说大国其实就是帝国，你说现在人不喜欢用这种词了，把帝国主义都不叫了，对吧？但帝国主义仍然存在，这是现代帝国主义的崛起过程中，谁得利了，谁受害了。我觉得得利的还是各国的垄断资本，统治阶级。受害的不光是被侵略扩张所迫害的其他国家殖民地的人民。 其实各帝国的本国的人民也是帝国扩张崛起的受害者，那么他们为帝国的崛起扩张付出了沉重的代价。 这个可以看看从欧洲人民在两次世界大战中做出的代价就是一个证据，那么美国人，至今仍然在为美国帝国主义的霸权，每年每月每日每时做出牺牲，这个事大家都不要忘记了，所以发达国家在当今世界还就是帝国主义国家，面临着对帝国主义近百年前，我看了是1916年写的，《帝国主义是资本主义的最高阶段》，这本书它的结论我觉得当前仍然有效，我们现在所处的时代仍然是帝国主义时代，我们不能忘这一点。 很多人好像就不谈这个，当前美国是个超级大国，这个超级大国凭什么说呢。我说美国在全世界一百多个国家里边都有它的军事基地。我不知道其他的国家，不知道英国在外国有没有军事基地，法国有没有？几乎没有其他的国家，在国外有军事基地的。就美国一家，在其他上百个国家里有它的军事基地。 所以这样可以说美国是人类历史上直接来讲最强的世界霸权，但是其他所谓发达国家它也是帝国主义，它只不过不是世界霸权发展，你看最近欧盟，像法国积极参与对利比亚的军事进攻，对吧？就说这些好多，所以毛主席当时叫第二世界的其实都是帝国主义国家，它只不过是不是超级霸权罢了，它还是帝国主义的东西。 那么帝国主义怎么来的？这帝国主义是资本主义发展的必然结果，资本主义在每一个国家的发展，都得使的本国的资本为了资源，为了市场，不得不到全世界去扩张。 那么先崛起的和后崛起的就是为了冲突，那么后这些国家资本就不得不挑战先崛起国家的自己的利益。你像德国为什么掀起了第一次生产战？德国日本为什么先进第二次世界大战？他不就是要挑战已经把世界瓜分完了的，尤其是英国的、法国的这些利益。这些挑战，必然要激化不同国家利益之间的矛盾，解决矛盾的办法什么办法？不是靠谈判！就是靠战争在战场上解决，最后解决。所以你战场上得不到的，你谈判桌上也得不到，这是肯定的东西，对吧？ 所以只要有资本主义，它就会有帝国主义、只要有帝国主义就有战争。战争在低位的时代只是个迟早的问题，人类要摆脱战争的折磨，就不能不推翻帝国主义，和帝国主义所依赖的、赖以生存的资本主义。二战以后的这60年来没有世界大战，不是因为今后世界大战不可能了，只不过是因为能够挑战新的当前世界霸权的美国的（国家）还没出现罢了，不等于没有，对吧？那么中国崛起的可能性有没有？毛泽东早就说过，只有社会主义才能救中国，那个时候世界列强不会允许中国和他们平起平坐，不会放弃他们的霸权，不会让中国的发展威胁到他们的利益，因此他们不会允许中国创立自己的独立自主的工业体系。 因此中国的出路只有走社会主义， 和西方国家断裂关系，这样子才能独立自主的发展。其实这个例子在西方知名国家有很多，你像美国的历史上发展的开始，也是在欧洲在1812年那场战争的时候，美国不得不靠自己的，不能去买欧洲买东西的，就靠自己，美国就发展起来了。好多都是在，你必须把它独立起来以后，它自己发展起来以后，才能有可能和已经发展起来的去竞争。 但是毛泽东时代所创造的独立自己的工业体系，其实成为了中国资本主义近30年的发展，创造了丰厚的物质和社会条件，这就是历史的辩证法。西方列强虽然一方面在中国大量投资，另一方面又害怕中国的资本主义发展，威胁自己将来的利益，所以才会有所谓的中国威胁论。这威胁他，你要是光做廉价的，你光做制鞋，你光做玩具他不害怕，但是你要搞高尖端的，这不行了。 所以西方列强极力推广的新自由主义和所谓普世价值，他们目的是什么？他们的目的，就是要妨碍像中国这样的第三世界国家的崛起，预防他们对自己的挑战。因为早发展起来的，他有个自由竞争，自由主义对他有优势，他先入的优势。所以早崛起的资本主义国家，英国、法国、美国都是在自由自由主义的旗帜下。美国还不完全，美国还经过一次南北战争以后，还是把美国给关在欧洲以外，提高税率以后，美国才崛起，以后才慢慢降低税率。所以他也经过一段所谓闭关锁国的时间。但是后崛起的资本主义国家，像德国、日本、意大利这些国家，资产阶级由于有了先崛起帝国的压制，他们就不得不依赖于国家的参与，来扶持自己的崛起。 这就是德国的法西斯，日本的军国主义，在这个国家为什么能立足的根本原因。好多人经常拿文化来解释历史，文化是现象，你不问问文化的背景是什么？这个东西无法解释，历史等于没有解释。它有一个根本的原因，所以不能拿文化解释历史，用要更深一层的对吧？ 虽然资本掌权的第三世界国家是不可能从根本上威胁西方列强利益的，它只能是西方资本的附庸。这就是所谓现在报纸上经常讲说中等收入国家病。 好多落后国家经过融入西方的资本体系以后，到了中等收入的话老是上不去，为什么？这根源就是，你私人资本掌权的国家，你只能做帝国的附庸，所以当附庸的也能赚好多。 也能你像在皇宫里边打杂的，也吃的得在田里边干活的好是吧？ 当买办的还能有点油水吃。所以韩国本来在过去所谓的发展中国家来讲，韩国当时还有可能加入所谓的发达国家 OECD。但是首先在末期那场经济危机又被美国给制服了，他到现在到底算不算帝国主义恐怕也难说。 在美的独揽世界霸权的今天，后起的资本主义国家要想加入帝国的行列，成为世界列强的一员，就完全不能依靠自由主义了。 最后崛起的资本主义国家中的资本势力，只能以新式的官僚资本的形式出现来推动自己的崛起。这种新式的官僚资本的特征和蒋介石时代的旧式官僚资本大为不同，新式官僚资本是一个继承了原社会主义国家的高度统一的全民所有制的国家的体制的官僚资本，而不是一个从封建时代官商勾结演变出来的那种旧式的官僚资本。 所以这种相对私人资本来说，现在新式的官僚资本政权有其突出的特征。拿中国的官僚资本来说，首先它是一个集中在左右国家经济命运的，比如在金融、能源、交通、电信、冶金、机电、化工和国防等大型或垄断行业中，处于主导地位的政权。因而它是一个政治和经济权力高度集中的政权，是私人资本政权远远达不到的一种政权。 西方列强国家它真正的政府是为私人资本服务的，而不是私人资本为政府服务的。 所以在西方资本家国家里边，掌权是私人资本，是华尔街大老板，你看这次经济危机就看出来谁是老板对吧？经济危机的罪魁祸首是华尔街得到什么惩罚呢？几百亿几万亿的奖金作为惩罚，就是说谁是老板对吧？但是这种官僚垄断的这种政权，它可以不顾国内中小私人资本的利益，强行扩张官僚资本利益，极其有效的进行资本的高速积累。 咱们各地层出不穷的强拆事件就是一例。这种挣政权，政治和经济权利的高度统一，又使它可以用所谓高效的，集中优势兵力打歼灭战的方法。 再比如说高铁、军工等领域加速中国工业技术的升级和提高，形成对西方列强的隐性挑战啊。全国非常快速的建成的高铁网络，就充分的体现了这种官僚资本特征，体现了他所独有的，其他资本主义国家望尘莫及的优势。社会帝国主义是毛泽东早在70年代就担忧过的现象。 要不是苏联社会帝国主义，由于统治阶级内部的深层次的矛盾，最后表现出他的外强中干的本质，最后溃败于以美帝国主义为代表的老牌的私人资本政权的攻击。 我们今天完全可以理解，为什么当初毛泽东把社会帝国主义看成是最明显的敌人？在网上有一个《中国社会各阶层的分析》一本书，这个（李毅）在这里边说，中国国有经济则从事着高科技和资本积累密集型产品的生产，这些产品是中国作为一个现代民族国家所不可或缺的，而美国绝不会卖给中国的东西，特别是大规模杀伤性武器，比如战斗机、航空母舰、核潜艇、先进的雷达，先进的通讯设备，以及更为重要的用来生产这些产品的机械制造业和高级材料制造业。 只有公有部门有能力研究开发制造这些产品，这就是为什么公有部门现在还雇佣着大部分教育精英。尽管非公有经济产出，中国GDP的34到4/5。只要美国不向中国出售，并禁止其他国家向中国出售这些高科技产品，中国就必须维持一个强有力的公有经济。 中国资产阶级在这个领域里面基本上是无能为力。在这里他所说的中国资产阶级其实就是中国的所谓民营或私人资本那一部分；他所说的公有和国有那一部分，其实就是中国的官僚资本所有的那一部分。无论中国无论是私人资本还是官僚资本，都不会满足于两头在外的，低技术含量的，劳动密集型的，产业链低端的世界资本分工，正在努力进行着转型。 正是因为中国有个较强大的新式官僚资本集团，中国的资产阶级才有崛起的可能性，这就是西方列强一再的强烈的反对把西方的资源卖给中国有官方背景的中国企业的，根本原因。你像中国要买美国的一个石油公司，它国会参与了通过法律不许中国买，为什么？对吧？为什么？因为中石油是中国官僚资本的，它没法去控制，所以崛起后的中国将面临的就是走反霸，还是与列强争霸的道路。 那么反霸与争霸的区别在什么地方？我觉得只有无产阶级领导的政权，才会是在自己崛起后，成为反对帝国列强称霸的政权。其他资产阶级领导的政权，在自己崛起后，要么是像日本那样在战败后，干当孙子不争霸；要么是像前苏联冷战时期那样，不当孙孙子必争霸；要么是像那些有人想象那样，先装孙子后称霸。 那么反霸的就像毛泽东那样，抗强扶弱，宣传无产者，只有解放全人类才能解放自己的道路，坚决支持各国人民的反帝、反美和反霸斗争。想想当时并不富裕的中国先是在朝鲜战场和以美国为首的世界霸权进行了一场意义深远的较量，而后就有无私援助坦桑尼亚建的铁路，全力支援越南的反美斗争等一系列措施，赢得了第三世界人民的爱戴和支持，所以才有中国能加入联合国，成为第三世界的一个代言人。 争霸者是欺软怕硬窝里横，狭隘民族主义利益优先。面对其他民族的灾难，幸灾乐祸趁火打劫，希望是媳妇熬成婆，对吧？压迫者翻身压别人，这就是争霸者的逻辑。你看早先崛起的苏联，在斯大林时代就有大国沙文主义的倾向，到了赫鲁晓夫时代，虽然就一步步的走上了世界霸权的道路。 那么当前中国外交所遵循的韬光养晦逻辑，就是先装孙子后称霸的逻辑，而不是反霸的逻辑。韬光养晦骗不了美帝国主义，只不过是自欺欺人的伎俩而已。官方宣传的永不称霸的许诺，就像永不翻案的那句话，一样不可信，对吧？ 中国已经在南海的海域里出现自己的舰队，证实了他已经走上了帝国主义的第一步，就连（郎汉平）这样一个非马列主义者都看得很清楚的，所以索马里海盗问题就是因为帝国列强肆意践踏一个主权国家所造成的，当索马里人走投无路，连近海打鱼的生路都被跨过远洋渔船摧毁了。除了当海盗以外，他们还有什么活路对吧？ 所以在海索马里海盗问题上，反霸者就会努力帮助索马里人民重建家园，争霸者就会利用这一机会磨练自己的制海权。在中东问题上，反霸者就不会允许美的打着联合国的旗号干预石油国家的内政，争霸着就会西方就会和西方狼狈为奸，默许帝国的横行霸道。 最近有个学者出了一本书，他在这个书中有个自序，他讲“中国需要经营和治理世界的经验”。他也没有问问中国人民会不会允许其他国家积累所谓是经营和治理中国的经验。如果不会那么有什么理由相信世界，人民会欢迎中国积累所谓经营和治理世界的经验。他在第一页里说，经营和治理世界是各主权国家应当享有的平等权利，是国际民主的重要表现。 但是我们想想，在帝国的时代有什么国际民主可言？紧跟着他就为帝国主义辩护，国不分大小，都有经营和治理世界的权利，但不一定能担当起治理世界的责任。 对世界和平和进步做出的贡献大、所尽义务相当多的那些国家，必然要在世界政治上被赋予较多的主导权。帝国主义只不过是世界主导权的过度伸张而已。这和美帝国主义者宣传如同一者，按照美帝的逻辑，美国这样一个世界宪兵对维护世界的和平和推动世界民主的进程所做的贡献最大，因此它在世界上应当是当仁不让的享有领导权，你反什么吧！对吗？按照这个逻辑，所以这种书带有浓厚的中华帝国的色彩。 这本书的下卷最后一章系统地表达了帝国主义的所谓国家安全理论。他提到了中国的制海权的理念，提出了随着中国经济对外依赖程度的进一步加深，保护中国海外的经济利益，就成了中国国家安全不能不考虑的问题。 还说什么中国经济及其利润的海外延伸，是当代中国国家安全已不一定是已经不是生存意义上的，而是发展意义上的概念。这不就是列宁近百年前所描述的帝国主义逻辑，不是它是什么，对吧？什么是国家利益，它就是一个国家的统治阶级的利益。难道中国人民会认可中国的统治阶级，重踏各帝国崛起的血腥道路，欺软怕硬，把中国人民当作自己崛起的炮灰，踩在人民的血迹上，寻求大国的势力市场和威望。中华帝国的崛起代表了哪个阶级利益？不是很清楚吗？由此可见，称霸与否不是以个人的意志和愿望为转移的，而是由其阶级利益所决定的。 资产阶级是个只有在各个领域都相互争霸才能生存的阶级，而只有无产阶级才具有国际主义精神。中国人民50年代抗美援朝斗争，就证实了只有像毛泽东那样的一个坚定的国际主义者，才是一个真正的爱国主义者。 那么咱们谈谈爱国主义问题。 爱国主义分进步的或革命的爱国主义，也分帝国主义法西斯的爱国主义。先谈谈进步的或革命的爱国主义是什么？受压迫民族的爱国主义是反帝和争取民族独立的爱国主义，使这些民族的工人阶级获得解放的首要条件，是为大多数人民服务的，因此它是进步的或者是革命的。 进步的爱国主义是在落后的或发展中国家的民族资产阶级领导的，以狭隘民族主义，而不是以解放全人类为其最终目的的爱国主义。革命的爱国主义，相比较是在帝国主义横生霸道的时代，以无产阶级的长远利益和全局利益为其出发点的，批判狭隘民族主义的爱国主义，这就是进步的还是革命的一个区别，是哪个阶级领导的。 第三，世界很多的民族资产阶级领导的反帝斗争，如印度的、印度尼西亚的、巴西等等很多，拉丁美洲的50年代60年代的一些都打的是爱国主义旗帜，它都是一个进步的爱国主义。 相比之下，苏联二战时期也高举着是爱国主义旗帜，但它是革命的爱国主义。 中国工人阶级及其政党，中国共产党，领导的反帝、反封建的新民主主义革命时期，所高举的爱国主义旗帜，也是革命的爱国主义，这一爱国主义把日本人民和日本帝国主义区分开来，把美国人民和美帝国主义区分开来。这一爱国主义是建立在国际主义基础上的爱国主义。朝鲜战争证明了只有坚定的国际主义者才是真正的爱国主义者。那些狭隘的民主主义者是不会在新中国刚刚建立的艰难岁月里迎接美帝国主义的挑战的。但是事实证明没有那场国际主义的反帝斗争，中国的经济建设就不会有将近60年的和平。 那么什么是反动的或法西斯的爱国主义呢？压迫其他民族的发达国家的爱国主义，就是反动的法西斯的爱国主义。美国欧洲和日本的爱国主义就是反动、反共的爱国主义。这种爱国主义之所以是反动的，是因为他是为了转移国内工人阶级的斗争，矛头是为少数本国垄断资本利益服务的爱国主义。有了对外的侵略战争，这些帝国就可以转嫁国际国内的危机，转移国内人民的视野，更重要的可以镇压本国工人阶级的崛起。 同样的，其他后崛起国家的爱国主义就很有可能变成帝国主义之间称霸的工具。同一次世界大战中的各帝国主义国家人民在各自的爱国主义旗号下相互残杀，伤亡惨重。二次世界大战中的德国和日本人民又一次在“爱国主义”的号召下，为本国的统治阶级付出了沉重的代价。 二战以后，美国人民在爱国主义的旗下，为当今的美帝国主义在世界的霸权地位不断的在朝鲜战场、越南战场以及如今的伊拉克、阿富汗战场付出惨重代价。所以崛起后帝国的爱国主义是虚伪的，是反动的，是为少数统治阶级服务的。在崛起后的中国，我们要警惕那些祖国荣誉高于一切的狭隘民族的口号，我们要警惕那些仅仅从狭隘民族主义角度来高举毛泽东思想的人，那些打着毛泽东思想的旗号来反对马列主义毛泽东思想中的国际主义和共产主义精神的，为官僚资本服务的政客和投机家。 毛主席从来就是反霸的，而不是争霸的。高举毛泽东思想的争霸者是对毛泽东思想的背叛。 在帝国主义时代，哪一个国家工人阶级崛起，就是那一个国家的民族的崛起。 十月革命才是俄国崛起的起端，那么中国革命也给中国崛起造成条件，但是一个民族的崛起并不一定是国家工人阶级的崛起，比如说日本的崛起就不是日本工人阶级崛起。所以占中国人口百分之六七十的中国工人阶级在中国资本与西方列强争霸的斗争中，一定要保持自己的独立性，要在资本势力集团的混战中寻找自己成长壮大的机会，要争取的是自己阶级的崛起，而不去充当任何一国资本的炮灰。 只有崛起的中国的工人阶级才有可能成为全世界反霸反帝的中坚力量。 但是在中国这样一个官僚资本占强势的国度里，恰恰是官僚资本最善于以民主义的口号去镇压工人阶级的崛起，因为崛起的工人阶级会彻底的粉碎他们在世界上称王称霸的梦想。 美帝是人类历史上最后的一个霸权，这是我的观点。在核武器时代，由于美国拥有足以多次炸停世界的核武器，和遍布世界海洋和为数众多的国家陆地上的，武装到牙齿的军事力量，美帝国主义是绝不会允许其他任何势力挑战他的霸主地位，他也不会主动的放弃自己的霸主地位。 就像中国的和平崛起，在帝国主义时代不可能，美国的和平没落也是不可能的。也是中国的崛起不可能是和平的，美国的没落也不会是和平的，但是它的没落又是不可避免的。因为这就是列宁所说的帝国主义，资本主义发展的不平衡不均衡性所决定的。资本主义的发展必然导致帝国主义，后发展的资本主义国家必然要和其他列强争夺市场和资源，走在资本主义道路上的中国也不例外。 毛泽东思想告诉我们，当今的中国是走的资本主义道路，马列主义告诉我们资本主义必然导致帝国主义，帝国主义迟早必然导致战争，这是一个不以人的意志为转移的客观规律。美帝国主义的世界霸权在今后再维持50年的可能性不大，但是他的没落已经非常明显了，他越来越依靠自己的军事力量，而不是它的经济力量来维护它的世界霸权地位了。 因此世界人民在今后半个世纪中面临着两个选择，要么在帝国之间发生战争之前，在全世界范围内推翻帝国主义和其赖以生存的资本主义制度，来避免战争对人类的摧残。要么全世界人民会在帝国之间的战争中认识到帝国主义和其赖以生存的资本主义制度的腐朽性、反动性和荒谬性，进而在全世界范围内最终的推翻资本主义。那种以为全球化的资本主义世界就会避免帝国之间的战争，其实是一个危险的空想。 资本的全球化改变不了帝国主义的本性，即便是各国资本在跨国公司里边互相渗透，也改变不了资本主义政权的隶属性。美国的军事力量最终是要为身为美国公民的美国资本服务的，维护的是由于是有利于美国资本的世界资本主义秩序。你想想，日本的、德国的、英国的资本家没法控制美国的核武器。美国的核武器听谁的？听华尔街的啊。 所以，马克思讲工人无祖国，但是资本确实有祖国。在资本世界，祖国是为资本服务的。 但是由于美帝国主义在核武器时代的庞大，不大可能有任何一个国家，像美国当年在二战后替代英国那样的，将来替代美国，成为一个新的超级大国。 美帝国主义与其他帝国之间的矛盾，总有一天会造成世界范围的灾难。教育包括美国人民在内的全世界人民，帝国主义的本质，迫使人民起来最终的推翻帝国主义和资本主义，把无产阶级专政的社会主义推向全世界。 美国人的核武器干嘛？它对付不了美国人民的革命，你想想美国人民企业造反，它用核武器对付能行吗？对吧？都在纽约市里边，你炸谁去？所以要不说毛主席讲的美国是纸老虎，原子弹也是纸老虎。你挣钱可以，但是对国家人民的革命它是无能为力的。 你去想想你看看伊拉克，阿富汗，它有原子弹，仍然解决不了问题，现代化武器并没有改变。毛主席讲的是得道多助，失道寡助，这是最主要的。帝国之间的一战造就了头一个无产专政的社会主义国家。 帝国发起的第二战造就了一个社会主义阵营，如果帝国主义胆敢发动第三次世界大战，它必将埋葬整个资本主义制度。所以最后还是马克思那句话，全世界无产者联合起来！ 就这么多。 作者：marvel084 https://www.bilibili.com/read/cv12440633 出处：bilibili","link":"/cache/%E9%98%B3%E5%92%8C%E5%B9%B3%E5%8F%91%E8%A8%80%E7%A8%BF.html"},{"title":"","text":"NAS的必要性及可行性 NAS是什么NAS是一种存储文件的技术，一般来说，有DAS、NAS和SAN三种。基于windows、linux等的开放系统服务器的外挂存储一般有直连存储(Direct-Attached Storage)和网络化存储。 网络化存储(Fabric-Attached Storage)根据传输协议分为：网络接入存储(Network-Attached Storage)和存储区域网络(Storage Area Network)。 下面一笔带过。 DAS直连式存储（Direct-Attached Storage），存储设备直接通过线缆挂载到服务器上，比如外置硬盘柜。DAS方案一般有RAID（独立硬盘冗余阵列Redundant Array of Independent Disks）和JBOD（就是一堆硬盘！Just a Bunch Of Disks） 这样的方式，要求每一个服务器都需要配备存储设备，对于多服务器网络系统来说，效率很低。 SAN存储区域网络（Storage Area Network），独立于TCP/IP网络外的专用存储区域网络，扩展性很强。 例子就是一大堆磁盘柜，通过SAN交换机与服务器通信。个人一般用不上。就是，文件存储服务器构成的局域网。 NAS网络接入存储（Network-Attached Storage），将存储设备通过标准的网络拓扑结构（例如以太网），连接到一群计算机上。实现的是文件级别的共享 ，是一种带有瘦服务器（网络文件服务器）的存储设备，链接到TCP/IP网络上。比较适合个人使用。不过因为通过网络传输，所以需要占用网络带宽，同时有数据安全问题。 例子就是文件存储服务器开启网络共享。 NAS可以干什么NAS主要就是作为一个7×24小时在线的存储服务器，在内网，配合软路由，高速网口，可以实现快速的文件交互，如果是AIO或者搭配HTPC等，就可以进行影音的快速解码查看。 同时，NAS可以作为一个个人的文件备份服务器，随时随地访问，支持多种终端的访问。不过在外网需要做好公网IP或者内网穿透。 也可以在NAS上安装软件，如下载工具，作为一个下载机。或者作为一个服务器，建站。 NAS与AIO的比较AIO即是All in One，把所有的功能集中在一台服务器上，什么NAS、软路由、HTPC等等。看似很美好，但是个人觉得可用性并不多。 首先是安全性，AIO有一个弊端就是：One bomb, all bomb。一旦有一点问题，那么挂载的所有服务都会挂掉，从这点来看，我觉得还是功能之间分开或者作有限的结合比较好。比如nas是7×24运行，但如HTPC只是固定或偶然时间使用的，做在一起就不太合适了。 第二点是功耗的问题。NAS的商业产品都把功耗做得很低，个人DIY也需要留意功耗的问题。而组建AIO则对性能提出了要求，性能的提升必然带来功耗的增加，特别是AIO的很多服务并不需要不间断在线，这时性能又大大冗余了，感觉并不是很划算，不过功耗也不会增加太多，算是一个考虑的次要点。 NAS的必要性首先还是要回归功能。首要的功能就是存储备份。实际上个人的数据到现在我也没有太多需要备份，不爱拍照，重要文件就那么点，每次换手机虽然很不舍得，但是还是会把用不上的数据断舍离。而且即使存在组了阵列的nas上的数据也是有丢失的风险的。最重要的文件肯定是需要冷备份加多份备份的。确实很重要的，不如买个千年盘刻录好（=。=）不过nas确实可以预留个1T作为个人数据、多终端数据的同步。毕竟我萌生组建NAS的念头是毕业前夕论文还没交的时候，硬盘出了连续的坏块，差点就无了（点名批评笔记本2.5寸都是叠瓦盘！So WD, fuck you！） 其次就是NAS的附加功能了，一般是音视频流。搭配下载机，可以存放很多电影，对于我来说，即使存放了很多电影，也不算重要的数据，那么这一块数据在NAS上应该也是以Basic的方式储存的。音乐方面，确实有收集的意愿，可以算一个理由。而音乐普通的压缩无损最大也就20M，有个1T已经能存放很多了。 最后是服务，建站的话，只要一个小博客，如果需要挂载在上面，还要做好内网穿透，小水管一样带宽，实在是不怎么地。不过有一定的可行性，虽然还是白嫖github比较划算。另外一个功能就是我看到觉得还不错的，就是电子书、笔记的多终端交互，个人知识库的构建。这些文本文件并不需要大带宽支持传输，内网穿透搭的小水管也是可行的。这个服务需求可以搭一个试试看是否有必要性。另外，既然可以建站，那么挂载一些小型服务也是可行的，挂几个爬虫，数据就存里面，也很便捷。 组建NAS的要点组建方式的考查主要就是直接买还是DIY。直接买的成品如群晖、铁威马、威联通等等，看起来都是高价低配，虽然确实不需要拿来做什么性能消耗很大的事情，但2000+买一个J1900级别的服务器，确实很难接受，成品NAS的价值，主要在于服务，厂家提供良好的服务支持，稳定的硬件服务，以及数据安全的持续保障，还有如群晖提供了速度还不错的外网访问。但我觉得外网的大流量传输并不是我个人的一个必不可少的需求，所以还是倾向与DIY，等真的形成依赖，有需要在买也不迟。 DIY方面，要学习和留意的地方就相对较多了。硬件的功耗、性能都是需要考量的。使用怎样的系统，应用支持的程度也是一个重点。 NAS系统的比对黑群晖、unraid、freenas、PVE等。 功耗功耗计算，忽视峰谷电与阶梯，以电费平均一度0.6元计。每高10W的功耗，每年的电费增加10 × 24 × 365 × 0.6 ÷ 1000 = 52.6元。 每挂载一个3.5寸的机械硬盘，大约增加6-8W。 所以CPU的功耗性能比要高，功耗要低。 性能CPU的选取网口其他硬件直通的问题，硬件直通的支持影响到硬件性能的释放和效率。 解码能力。 是否需要7×24在线，还是说经常休眠，使用WakeOnLan唤醒等。 安全性，自组NAS并暴露端口到公网，怎样不成为肉鸡是一个重要的问题！ 软路由的必要性。","link":"/cache/NAS%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E5%8F%8A%E5%8F%AF%E8%A1%8C%E6%80%A7.html"},{"title":"","text":"CPU型号意义intelintel分为奔腾、赛扬、酷睿以及至强，其他的安腾、凌动就算了 。 一般的赛扬celeron、奔腾pentium都比较老，而且多是入门、低端产品。以G、N、J开头。 酷睿：Intel Core i7-10700K， Core表示酷睿，i7与i3、i5、i9表示处理器等级，’同代’数字越大性能越好。 前一到两位表示代次，10表示十代，只有三位的表示一代，如i7-980。 后三位一般越高性能越强，或功能更多。 后缀SKU字母各有含义，K可超频，F无核显，X至高性能处理器，E嵌入式工程级，S低压，T超低电压，P屏蔽集显。笔记本处理器部分： M代表标准电压， U低压，H高电压且不可拆卸， X高性能，Q4核心至高性能，Y超低电压。 至强：有铜、银、金、铂金。E、W、D系列，e3、5、7系列。 Intel Ceon Platinum 8180M， Xeon表示至强，platinum表示铂金，第一位，8表示铂金、6、5表示金、4银、3铜。第二位为代次。后两位越大越强。SKU字母后缀还是要用再官网查表吧。 EWD系列有点乱，也没啥必要买。 e3、5、7，如E5-2650v2， 四位数的第一位表示最多可同时安装的CPU数量，第二位只有2、4、6、8，表示插槽类型，对应LGA2011之类的，需要查表才能确定，不一定有固定对应。后两位表功能、性能。SKU字母编号需要查表，V几代表代数。 AMDZEN架构以外的不太需要去了解，别买。ZEN架构的有新速龙Athlon，锐龙Ryzen、线程撕裂者和服务器霄龙EPYC。速龙对标奔腾。锐龙对标酷睿。霄龙命名复杂，而且还用不上。 AMD RYXEN 7 5800X，规则差不多，7级5代，800中，8性能等级，后两位越高规格越高，字母后缀查表吧。AMD锐龙基本都可以超频，不锁倍频！ 性能指标不如直接看天梯图。 频率：越高性能越强（同架构）默频、睿频、超频。默频一般是日常维持的频率，但可以更低，睿频是运行时的频率波动范围，超频是通过加压等使CPU频率超出限制达到更好的性能。 核心与线程，不一定核心越多越好。一般核心与线程比是1:1或1:2，需要视使用场景挑选。 TDP，热设计功耗，不是工作功耗。计算散热、电源时，需要翻倍还不止。毕竟有了睿频2.0等等，不想展开写了。TDP的本意是CPU被设计为需要排出多少热量才可以稳定工作到标称频率的热量功率值，现在没有太多参考价值。突破功率限制PL1、PL2甚至超频后，功率都是指数上升的。 架构，一般越新越强的啦，所以i3不一定比i7差。 体质，CPU与GPU都一样。没有一样的体质，体质好的可以在更低电压达到特定频率，所以超频也能超得高！ GPU看天梯是最快的方式。 GPU负责画面渲染、炼丹。显卡是GPU以及其周围电路组成的。 一般有集显、核显、独显。集显基本不再用了，核显在CPU自带，性能一般，占用额外的内存开销。 GPU决定了显卡的性能基础。显卡分为A卡和N卡，对应AMD与NVIDIA。公版显卡是这两个厂自己做的卡，非公版是这两个厂将GPU核心与显存颗粒打包给其他厂家加工的显卡。一般非公版的好。 一般有N卡Geforce，AMD的RX系列，游戏性能比较好，N卡的Quadro，AMD的WX系列专业渲染比较不错。RTX都不错。 显存GDDR6的颗粒比GDDR5更好，显存越大越好，存放GPU渲染的数据。 显卡还需要注意视频输出接口，VGA，DVI，DP，HDMI，TypeC。旧的接口都不咋地。（VGA、DVI） 内存CPU与硬盘数据交互的中转。 内存的信息，如厂商、容量、频率、时序，在SPD信息中。马甲条据说散热更好？存疑。 性能主要由颗粒决定。不同代数的，性能、功耗各不相同，不能兼容。DDR4颗粒性能更强，频率更高，电压低。当然了，内存也可以超超频玩一玩的。 内存组合，双/多通道更好，毕竟四车道能跑的车更多。 其他，ecc与reg，检验位与寄存缓冲。多用在服务器、工作站，捡洋垃圾的话比较便宜。 主板平台、接口等。 电源转化效率，标定功率与实际功率 硬盘固态，闪存颗粒存储。速度快，无噪音。缺点只有贵。 机械，磁碟存储。便宜，数据安全。寿命长，容量可以很大。缺点就是慢，噪音大。（因为需要马达驱动针头在磁碟上转动读取数据） 性能顺序读写与随机读写性能。前者影响大容量文件数据，后者影响大量小文件数据的迁移速率，以及打开软件程序的快慢。所以一般来说随机读写比较重要，不过影响不大，各厂都差不多。 另外需要注意尺寸、协议以及接口类型。 技术机械机械硬盘的技术如今为PMR垂直磁性记录，包括CMR（传统式），SMR（叠瓦式）。叠瓦式狗都不买。 叠瓦式厂商制造成本下降，卖价不变，缓存变大，但性能下降严重。传统的CMR磁道之间为了数据不干扰，有一定的磁道间隙，而现有技术下，读磁头比写磁头小，那么磁道宽需要有写磁头的大小。这造成了空间的浪费。叠瓦式虽然解决了这个问题，但大大牺牲了性能。 尽管叠瓦式的读取看似没有受到影响，空间利用率也大大提升，一次写入也没问题。写入时，磁道数据会将下一磁道的空间也覆盖，因为叠瓦式像瓦一样叠起来了，写入第二磁道时，数据自会将原有的覆盖，顺便覆盖了第三磁道，但没关系，第三磁道写入时…… 改写时，第一磁道的数据覆盖了下一磁道的空间，所以需要将下一磁道的数据搬移，覆盖写入，再把下下磁道数据搬移，把“下一磁道”的搬回来，再… 所以缓存变大了，其实是拿来放搬移数据的。所以没有卵用。空间利用多了，磁盘面可以用更少的，价格反而不变，烂活。 一般7200转64M缓存的不是叠瓦盘，小容量（&lt;1T）也一般不是，大的就要留心看了。不过新的基本都是了。 固态影响性能的一般是颗粒和主控芯片。 颗粒原厂颗粒最好，黑片、白片颗粒多见于杂牌厂家。黑片、白片分别是无法通过出厂合格检验、通过部分合格检验的颗粒，隐患很大。 颗粒种类有四类，性能、寿命、价格一般是SLC&gt;MLC&gt;TLC&gt;QLC，一般TLC足矣（民用常用的颗粒）。高端的颗粒巨贵，没必要，有那个钱可以多买几片组阵列了，数据安全一样有保障。 散热风冷：下压、塔式，塔式效果很好，不过兼容需要注意，体积大。 底座一般有纯铝底，热管直触，铜底焊接，均热板等。纯铝底比较差，均热板最强，不过很少见。 热管看数量，虽然有些做工差的热管多也没用。 热管与鳍片结合方式：穿片与回流焊，后者比较结实稳定，散热好，一般顶部有小孔 风扇能直接看的只有大小，厂家写的东西看看就好，调速有DC和PWM。 水冷：以后要用再写。 机箱风道、用料以及尺寸。","link":"/cache/W-%E7%A1%AC%E4%BB%B6.html"},{"title":"博客建设清单","text":"博客功能待完善清单。 白天的博客背景图关注外链要不还是不弄了 分类头图以及缩略图规定化头图 缩略图显示是80×80，为兼顾保证显示清晰效果以及仓库容量，设置为200×200。 为保证风格相对一致，可以在 https://www.pexels.com/zh-cn/ 以及 https://unsplash.com/ 下载图片 缩略图分类博客相关：猫猫头，熊猫头。 CS相关：鸟类。 不同语言可以使用不同的鸟类。 尽量有一定区分性，至少不同属，以美观及表现力见，选雀形目、鹰形目、隼形目较好。 游戏：使用对应游戏的具辨识度的标志、人物等。 电影：海报、标志、人物等。 音乐：对应音乐家的头像、绘画作品、二创等；对应流派的文化衍生作品。 琐事杂文：小狗？ 文学作品：对应作家的头像、绘画作品、二创等；书封；改编影视的图像等。 什么用车呢？ markdown写作规范，母版？图片及非文字内容的命名规则缩略图：tn_ + bird/cat/dog/etc. + number 头图：cv_ + 博客数据的线下存档md文件占据空间不大，随意，定期备份，一年一次，分类归档（以时间定） 图片，依文章图、头图、缩略图分类保存，分原图以及裁剪压缩后的图像分类。 图床搭建已完成。待测试以及流程记录。 live2d暂时不要吧。 新分页，电影、音乐","link":"/cache/%E5%BE%85%E5%AE%8C%E5%96%84.html"},{"title":"","text":"水族景观以玻璃等透明载体展现水生生物的方式。依托水族生态，根据水生生物的生活习性、特点创作的具有美学功能的水下景观。","link":"/cache/%E6%B0%B4%E6%97%8F%E7%A7%91%E5%AD%A6.html"},{"title":"","text":"换个输入法不知哪一天开始总是感觉打字很慢，而且需要按很多次按键，于是便去了解了很多关于输入法的知识。而要想打字快，一般得四个手指都非常熟练，但并不是所有的常用字的拼音对应的按键频率都恰好分布到灵活的那几个手指上的。原因是，现代的QWERT键盘，经过迭代之后，降低了原来ABC顺序键盘的相邻按键卡壳的情况，同时加大了左右手交替概率，提高了打字速度。但，英语的字母频率跟中文拼音的频率一致吗？感性地说，应该不一样。所以更快的打字方式，应该是建立新的映射。 而中文输入法研究之初，为了实现汉字的信息化，国人做了很大的努力，最后基于字形的五笔诞生了。在当时，许多国外的学者认为，为了信息化，汉字不可避免地将会拉丁化，最后变成纯拼音的语言。原话：“计算机将成为汉字的掘墓人，不能输入电脑的方块字终将被这个世界淘汰”。1983年，王永民教授设计出五笔，汉字的输入变成了每个字最多只需要四个键，已经比西文更快了。五笔输入法是一个天才般的设计！（不过不是本文重点）当然，后来拼音输入法也有了，但是重码率相当高，（回忆一下智能ABC的选字），可以说是及其痛苦了。直到拼音智能算法的出现，降低了重码率，创造了模糊音纠正，搭配极低的学习成本（读过小学，会说就会打）才有了如今的市场占有率。但五笔的速度优势依旧在，而且天生地重码率相当低，能够极快地完成输入。 学五笔，不好吗？既然五笔有如此多的优点，学五笔，不好吗？这就得说五笔输入法的一大缺点了。学习成本巨大。我们当然会写字，但是键盘不会，如果一个笔画一个笔画地按，那未免太慢了。其实也还可以，手机上的五笔就只有横竖撇捺折，一样也有不错的输入速度，但键盘有26个键之多。那我们打部首偏旁不行吗，不行，太多了，而键盘只有区区26个键。所以王永民先生就将汉字分为横竖撇捺折的起笔及次笔，恰分为25份，再经过适当的调整，生成了五笔字根表，映射到键盘上。熟练后，打字飞快，但这里有一个问题，字根与字母按键的映射关系需要记（或者熟能生巧），熟悉字根之后，还需要学会如何“拆字”，而拆字，又有一套方法，那学习成本就很高了，而且需要大量的练习。所以也不怪当年打字员是一个比较专业的职业，普通人打打字只能对着智能ABC挠头了。那么，事到如今，有没有更好的办法输入信息化的汉字呢？ 音形结合先学音答案是显然的，不然文章便应就此终结。拼音输入法有一个缺点，就是重码率高，而且输入需要的按键平均下来也很多，但是有一个优点就是直观易学。如何解决呢？双拼。一般的汉字拼音，都有声母和韵母，韵母有复韵母，声母也有需要多个拉丁符号记录的，但他们都不多。（少于26就可以了）当然，韵母实际有39个，也有零声母的字，但这些只是小问题了。实际上，我们小学学的拼音并没有39个韵母，因为小学拼音教育的难处被叶籁士老先生想了一个办法客服，那就是整体认读音节，由此避开了舌尖前元音、舌面前半低元音、以及复杂的拼写规则。（zi、zhi、ye、yin、yue等）那我们可以遵循这一惯例，形成双拼方案了，重码率和按键次数减少，学习成本也只是额外多了需要记一点键盘映射。 拼音不妨再看看当年学过的拼音，似乎并没有学完。不过不再深入了解也不影响学习。 为了给汉字注音，自古就一直有学者为之努力，寻求一个易学而又全面的方案。 汉字作为记录汉语的工具，历史悠久，有独特的造字理据和结构方式，但也具有不能直接准确表音的特点。从直音法、反切法起，中华民族为汉语寻找一个科学适切的注音方案的努力就不曾停止。19世纪末，国内一些知识分子兴起了切音字运动，创制了20多种拼音方案。五四运动前夕，民国政府颁布了汉字笔画式的注音字母，在帮助识字、正音方面起到了一定的作用。20世纪初，钱玄同、赵元任等创制了“国语罗马字”，郭质生、瞿秋白等创制了“北方话拉丁化新文字”，但也都未能形成统一的罗马字母拼音方案。新中国成立之初，为适应社会主义经济、政治、文化建设的需要，党中央做出进行语言文字改革的重大决策，确定了推广普通话、整理和简化汉字、研制和推行汉语拼音方案三大任务。在拼音方案方面，国务院专门成立了“汉语拼音方案审订委员会”负责研制和审订工作，在充分吸收前人理论与实践的精华、充分考虑各方面意见、广泛而慎重讨论的基础上，研制出了《汉语拼音方案》，并于1958年2月由全国人民代表大会第五次全体会议正式批准颁布推行。 ——中华人民共和国教育部。 这其中汉语注音符号是一个较为早期的版本（据我所了解的），至今中国台湾地区也依旧使用这种方案。（看着就不太会读了（其实也不难）汉语拼音冷知识——汉语拼音方案简介 这种方案有比较多的注音字母。当然，也可以和现在用的拼音方案进行转换。 这就对应到我们现在熟悉的拼音方案了。 双拼可以看到声母是完全可以塞进键盘的，而韵母，虽然多了很多的样子，但也可以观察到，某些声母是无法和全部的韵母相拼的，比如可以有gua，但没有gia，有xia，但没有xua。那就可以对韵母进行“归并”。而零声母的问题，在现行下图以小鹤双拼为例。 记一记，练习一下就可以了。可能得一个多月吧。但这样还是不够快（没五笔快），因为同音字的存在，还是得选字选词。那如何再进步呢？做一个缝合怪，向五笔学习，使用双拼音形。 精通双拼又学形音形以小鹤双拼为例。但在此之前，还是介绍一下五笔吧。说实在的没太搞懂。 五笔鹤形输入法的折腾","link":"/cache/%E8%BE%93%E5%85%A5%E6%B3%95%E9%87%8C%E5%AD%A6%E6%8B%BC%E9%9F%B3.html"},{"title":"","text":"hexo博客夜间主题添加","link":"/cache/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9C%E9%97%B4%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0.html"},{"title":"React学习","text":"因为博客主题用了jsx，是React的，所以我也学点React。 基础学习React前，需要掌握一点基础知识，如编程、JavaScript的基本用法以及DOM。","link":"/cache/react.html"}],"posts":[{"title":"hexo+icarus博客搭建","text":"使用hexo与icarus搭建博客的过程。 前言​ 使用hexo搭建静态博客，比较简单方便，主题有很多，选择icarus是因为看着简洁大气，结果icarus自3.0后更新为使用jsx，可参考的修改方案不多，于是在github上冲浪了很久，踩了很多坑。 安装Node.js​ 首先下载稳定版，安装完成后命令行输入node -v和npm -v 1234$ node -vv14.17.1$ npm -v6.14.13 ​ 有版本号，安装就没问题了。报错的话重装/清理环境+重装。 添加源​ 没梯子就用阿里镜像加速。 1npm config set registry https://registry.npm.taobao.org 安装Git​ 下载安装就好了，添加git bash到命令菜单。 Github​ 新建项目，项目名字为”github名字.github.io”，README、gitignore、许可全都要。项目内点击Settings，GitHub Pages，点击Choose a theme选择一个主题。完成主页初始化。 Hexo​ 博客目录下右键点击Git Bash Here，输入npm i hexo-cli -g安装完后，输入hexo -v验证是否安装成功。不成功一般是路径问题，找到hexo安装路径，如D:\\node.js\\node_gobal\\node_modules\\hexo-cli\\bin\\，环境变量添加好了之后重新打开 git，一定要重启git，一定要重启git，一定要重启git。 ​ 输入hexo init初始化文件夹，然后输入npm install安装必备的组件。完成后输入hexo g生成静态网页，输入hexo s打开本地服务器，浏览器打开http://localhost:4000/可以进行本地预览。按ctrl+c关闭本地服务器。 连接Github​ 首先右键打开git bash，然后输入下面命令： 12git config --global user.name &quot;GitHub用户名&quot;git config --global user.email &quot;GitHub账号&quot; ​ 然后生成密钥SSH key： 1ssh-keygen -t rsa -C &quot;GitHub账号&quot; ​ 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。 ​ git bash中输入 1cat ~/.ssh/id_rsa.pub ​ 将输出的内容复制到框中，点击确定保存。 ​ 输入ssh -T git@github.com 12$ ssh -T git@github.comHi xxxx! You've successfully authenticated, but GitHub does not provide shell access. ​ 打开博客根目录下的_config.yml文件，修改最后一行的配置：（github在老美搞政治正确的时候，把默认分支master改成main了，人都麻了。） 1234deploy: type: git repository: GitHub项目地址 branch: main 编辑文章​ 安装扩展npm i hexo-deployer-git。然后输入hexo new post &quot;文章标题&quot;，新建一篇文章。其中，post代表scaffolds文件夹中的post.md模板，还有draft、page两种模板，都没什么用，可以自定义。在D:\\博客根目录\\source\\_posts的目录，多了一个.md文件，编辑就行。当然也可以写好拉进_posts文件夹。写完后，根目录输入hexo g生成静态网页，输入hexo d上传到github上。 域名有空再弄。要花钱要备案，建议国外域名。买了之后在项目setting的custom domain写上域名。 icarus主题https://github.com/ppoffice/hexo-theme-icarus 12npm install hexo-theme-icarushexo config theme icarus 修改config.yml文件 跟着文档来就行 bug搞完了才写的这博文，很多坑已经忘掉了，没有及时记录。 连接github失败 有可能是vpn问题，可以修改host文件，host可能拒绝访问，用管理员打开power shell在其中输入nodepad编辑。 有可能是项目没连上，能ping通。创建一个同名文件夹，git init然后上传到github，创建第一次连接，之后就可以了。吧？ 一些插件评论插件​ 目前主要有valine、disque、gitalk、畅言等插件，icarus都有自带的实现，只需要在cofig_icarus.yml里修改配置即可。我使用了gitalk。相比其他的插件，虽然gitalk需要登录github才能评论，但是不要求网页备案和域名，使用原始的github.io就可以，而且UI很不错。其他的评论插件其实也需要登录才能开始评价，畅言还有像广告一样的东西，垃圾，valine不需要登录但基于leancloud，需要备案，相似的基于腾讯云的twikoo也是，故弃用。​ 使用gitalk，在github的setting页中的developer settings/OAuth Apps中创建OAuth Apps，其中homepage url与Autorization callback url为博客项目的根目录地址，即https://xx.github.io/，生成后点击生成密钥，并填写到配置文件中。 config_icarus.yml12345678910111213141516comment: type: gitalk client_id: xxxxxxxxxxxxxxxxxxxx client_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx repo: Some-of-Your-GitHub-Repo owner: you_github_name admin: - you_github_name per_page: 20 # 可选填 distraction_free_mode: false # 可选填 pager_direction: last # 可选填 create_issue_manually: false # 可选填 proxy: # 可选填 flip_move_options: # 可选填 enable_hotkey: true # 可选填 language: zh-CN # 可选填 具体配置查阅gitalk文档，刷新上传博客，评论一次激活。","link":"/2021/06/20/hexo+icarus%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"Hexo使用说明书2","text":"这是一篇对hexo的使用说明书之强行凑出的第二篇。记录一些新的技巧和常用的方法。方便写博客时复制。前面直接写复制内容，具体解释放后面。 常用文章头front-matter >folded12345678cover: /cover/cv_.jpgthumbnail: /tn/tn_.jpgtop: 0toc: truetitle: date: tags: blogcategories: blog 摘要1&lt;!--more--&gt; 多级分类、标签1234tags: [blog, myblog]categories: - [one, two] - [three] 代码1{% codeblock [title] [lang:language] [url] [link text] [additional options] %} 或者在typora自带代码框的语言栏选好语言后，空一格，写标题，再空一格，写&gt;folded或者&gt;unfolded 图片1234{% img [class names] /path/to/image [width] [height] '&quot;title text&quot; &quot;alt text&quot;' %}{% img jpg /gallery/.jpg '&quot;s&quot; &quot;s&quot;' %}title text为悬停显示名称，alt text为图像标题 外链图片（图床）12![图片名字](外链路径)[![图片名字](外链源路径)](访问路径) 音乐music >folded1234567{% aplayer &quot;歌名&quot; &quot;作者&quot; &quot;资源地址&quot; &quot;图片资源&quot; %}//外链形式{% aplayer &quot;一路向北&quot; &quot;Jay&quot; &quot;https://www.ytmp3.cn/down/69847.mp3&quot; &quot;https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg&quot; %}//本地形式{% aplayer &quot;Symphony No1 in C Minor&quot; &quot;Bruckner&quot; &quot;/music/Berliner Philharmoniker _ 小澤征爾Symphony No_ 1 in C Minor, WAB 101.mp3&quot; &quot;/tn/tn_mao.jpg&quot; %} 详细用法多个 categories 子分类下面的分类配置会将该文章放到 A/B 这个分类下。 123categories: - A - B 同样的作用还可以这样写： 1categories: [A,B] 上面两种写法最终的效果都是一样的，都是将文章放在了一个子分类目录下。 多个分类将文章同时分到两个或者多个不同的类目下 123categories: - [A] - [B] 只需要用中括号将独立的分类括起来即可，这样上面的文章就会被分类在 A 和 B 这两个不同的目录中了。 要将其分类到 A/B 和 C 两个不同的目录下（一个是子目录，一个是一级目录） 123categories: - [A,B] - [C] 多个tagstags没有层次性。 直接放进方括号内就行。 1tags: [A,B]","link":"/2021/07/15/hexo%E6%8C%87%E5%8C%972/"},{"title":"Javascript基础","text":"Javascript基础的学习记录。 JS简介JavaScript基础分为三个部分： ECMAScript：JavaScript 的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。 DOM：Document Object Model（文档对象模型），操作页面上的元素的API。比如让盒子移动、变色、改变大小、轮播图等等。 BOM：Browser Object Model（浏览器对象模型），操作浏览器部分功能的API。通过BOM可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。 通俗理解就是：ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器运行环境为 JS提供的API。 引入JS代码方式大致有三种，行内、嵌入以及外部引入。一般用外部引入。 行内行内式1&lt;input type=&quot;button&quot; value=&quot;点我点我&quot; onclick=&quot;alert('Hello')&quot; /&gt; 可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），比如放在上面的 onclick点击事件中。可读性差。容易出错，不好维护。 关于代码中的「引号」，在HTML标签中，我们推荐使用双引号, JS 中我们推荐使用单引号。 嵌入我们可以在html 页面的 &lt;body&gt; 标签里放入&lt;script type=”text/javascript”&gt;&lt;/script&gt;标签对，并在&lt;script&gt;里书写JavaScript 代码。练习测试的时候可以用一用。 外部引入编写另外js文件，在HTML中引用。 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 引入外部的 js 文件 --&gt; &lt;script src=&quot;tool.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 上面这段代码，依然是放到body标签里，可以和内嵌的js代码并列。另外，引用外部 JS文件的 script 标签中间不可以再写代码。 Javascript语法语法总览 JavaScript对换行、缩进、空格不敏感。每一条语句以分号结尾。 所有的符号，都是英语的。比如括号、引号、分号。 严格区分大小写。 注释 HTML、CSS、JavaScript三者的注释格式。 HTML 的注释 1&lt;!-- 我是注释 --&gt; CSS的注释 123456&lt;style type=&quot;text/css&quot;&gt; /* 我是注释 */&lt;/style&gt; 注意：CSS只有/* */这种注释，没有//这种注释。而且注释要写在&lt;style&gt;标签里面才行。 JavaScript 的注释 单行注释： 1// 我是注释 多行注释： 1234/* 多行注释1 多行注释2*/ 输入输出alert(&quot;&quot;)语句，弹出“警告框”。 console.log(&quot;&quot;)表示在控制台中输出 prompt()就是专门用来弹出能够让用户输入的对话框。用得少，测试的时候偶尔会用。 字面量包括数字、字符串、布尔值。“字面量”即常量，是固定值，不可改变。看见什么，它就是什么。 12345alert(369)console.log('886');if (true) {} 一般不直接使用，还是用变量好。 变量在ES6语法之前，统一使用var关键字来声明一个变量。比如： 1var name; // 声明一个名为 name 的变量 在ES6语法及之后，可以使用 const、let关键字来声明一个变量 123const name; // 定义一个常量let age; 如果你想定义一个常量，就用 const；如果你想定义一个变量，就用 let。 变量的声明和赋值，写在一起就行。复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。 声明多个变量时，只需要写一个 var， 多个变量名之间用英文逗号隔开。 为什么用 let ？变量升级问题。 标识符：在JS中所有的可以由我们自主命名的都可以称之为标识符。 例如：变量名、函数名、属性名、参数名都是属于标识符。通俗来讲，标识符就是我们写代码时为它们起的名字。 关键字：是指 JS 本身已经使用了的单词，我们不能再用它们充当变量、函数名等标识符。 JS 中的关键字如下： 关键字 >folded1234567891011break、continue、case、default、if、else、switch、for、in、do、while、try、catch、finally、throw、var、void、function、return、new、this、typeof、instanceof、delete、with、true、false、null、undefined 保留字：实际上就是预留的“关键字”。意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当充当变量名、函数名等标识符。 JS 中的保留字如下： 保留字 >folded123456789abstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、gotoimplements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 数据类型avaScript 是一种「弱类型语言」，或者说是一种「动态语言」，这意味着不需要提前声明变量的类型，在程序运行过程中，类型会自动被确定。JS 的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的。而且，变量的数据类型是可以变化的。 JS中一共有六种数据类型 基本数据类型（值类型）：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。 引用数据类型（引用类型）：Object 对象。 内置对象 Function、Array、Date、RegExp、Error等都是属于 Object 类型。也就是说，除了那五种基本数据类型之外，其他的，都称之为 Object类型。 数据类型区别： 基本数据类型：参数赋值的时候，传数值。保存在栈内存。 引用数据类型：参数赋值的时候，传地址（修改的同一片内存空间）。保存在堆内存。 字符串字符串的不可变性 字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。 代码举例： 123var str = 'hello';str = 'bye'; 比如上面的代码，当重新给变量 str 赋值时，常量hello不会被修改，依然保存在内存中；str 会改为指向bye。 模板字符串（模板字面量）ES6中引入了模板字符串，让我们省去了字符串拼接的烦恼。 在模板字符串中插入变量以前，让字符串进行拼接的时候，是这样做的：（传统写法的字符串拼接） 123var name = 'smyhvae';var age = '26';console.log('name:' + name + ',age:' + age); //传统写法 这种写法，比较繁琐，而且容易出错。 现在，有了 ES6 语法，字符串拼接可以这样写： 123456var name = 'qianguyihao';var age = '26';console.log('我是' + name + ',age:' + age); //传统写法console.log(`我是${name},age:${age}`); //ES6 写法。注意语法格式 注意，上方代码中，倒数第二行用的符号是单引号，最后一行用的符号是反引号（在 tab 键的上方）。 在模板字符串中插入表达式以前，在字符串中插入表达式的写法必须是这样的： 123const a = 5;const b = 10;console.log('this is ' + (a + b) + ' and\\nnot ' + (2 * a + b) + '.'); 现在，通过模板字符串，我们可以使用一种更优雅的方式来表示： 123456const a = 5;const b = 10;// 下面这行代码，故意做了换行。console.log(`this is ${a + b} andnot ${2 * a + b}.`); 打印结果： 12this is 15 andnot 20. 模板字符串中可以换行因为模板字符串支持换行，所以可以让代码写得非常美观。 代码举例： >folded1234567891011121314const result = { name: 'ivy', age: 18, sex: '男',};// 模板字符串支持换行const html = `&lt;div&gt; &lt;span&gt;${result.name}&lt;/span&gt; &lt;span&gt;${result.age}&lt;/span&gt; &lt;span&gt;${result.sex}&lt;/span&gt;&lt;/div&gt;`;console.log(html); // 打印结果也会换行 模板字符串中可以调用函数模板字符串中可以调用函数。字符串中调用函数的位置，将会显示函数执行后的返回值。 举例： 12345function getName() { return 'ivy';}console.log(`www.${getName()}.com`); // 打印结果：www.ivy.com 模板字符串支持嵌套使用1234567891011const nameList = ['ivy1', 'ivy2', 'ivy3'];function myTemplate() { // join('') 的意思是，把数组里的内容合并成一个字符串 return `&lt;ul&gt; ${nameList .map((item) =&gt; `&lt;li&gt;${item}&lt;/li&gt;`) .join('')} &lt;/ul&gt;`;}document.body.innerHTML = myTemplate() 数组数值在JS中所有的数值都是 Number 类型，包括整数和浮点数。 NaN：是一个特殊的数字，表示Not a Number，非数值。比如： 123console.log(&quot;abc&quot; / 18); //结果是NaNconsole.log(&quot;abc&quot; * &quot;abcd&quot;); //按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果。结果是NaN 注意：typeof NaN的返回结果是 number。 Undefined和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。 连字符和加号的区别键盘上的+可能是连字符，也可能是数字的加号。如下： 123console.log(&quot;我&quot; + &quot;爱&quot; + &quot;你&quot;); //连字符，把三个独立的汉字，连接在一起了console.log(&quot;我+爱+你&quot;); //原样输出console.log(1+2+3); //输出6 输出： 123我爱你我+爱+你6 总结：如果加号两边都是 Number 类型，此时是数字相加。否则，就是连字符（用来连接字符串）。 举例1： 123var a = &quot;1&quot;;var b = 2;console.log(a + b); 控制台输出： 112 举例2： 123var a = 1;var b = 2;console.log(&quot;a&quot; + b); //&quot;a&quot;就不是变量了！所以就是&quot;a&quot;+2 输出a2 控制台输出： 1a2 在变量中加入字符串进行拼接，可以被同化为字符串。 隐式转换我们知道，&quot;2&quot;+1得到的结果其实是字符串，但是&quot;2&quot;-1得到的结果却是数值1，这是因为计算机自动帮我们进行了“隐式转换”。 也就是说，-、*、/、%这几个符号会自动进行隐式转换。例如： 12var a = &quot;4&quot; + 3 - 6;console.log(a); 输出结果： 137 虽然程序可以对-、*、/、`%``这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。 例： 1234567 //a bvar a = &quot;1&quot;;var b = 2;a = b + a; //&quot;21&quot; 2b = b + a; //&quot;21&quot; &quot;221&quot;console.log(a); //21console.log(b) //221 效果： 1221221 例： 123var a = &quot;3&quot;;var b = 2;console.log(a-b); 效果：（注意，字符串 - 数值 = 数值） 11 Nullnull 专门用来定义一个空对象（例如：let a = null）。 如果你想定义一个变量用来保存引用类型，但是还没想好放什么内容，这个时候，可以在初始化时将其设置为 null。 比如： 12let myObj = null;cosole.log(typeof myObj); // 打印结果：object 补充： Null 类型的值只有一个，就是 null。比如 let a = null。 使用 typeof 检查一个 null 值时，会返回 object。 undefinedcase1：变量已声明，未赋值时声明了一个变量，但没有赋值，此时它的值就是 undefined。举例： 123let name;console.log(name); // 打印结果：undefinedconsole.log(typeof name); // 打印结果：undefined 补充： Undefined 类型的值只有一个，就是 undefind。比如 let a = undefined。 使用 typeof 检查一个 undefined 值时，会返回 undefined。 case2：变量未声明（未定义）时如果你从未声明一个变量，就去使用它，则会报错（这个大家都知道）；此时，如果用 typeof 检查这个变量时，会返回 undefined。举例： 12console.log(typeof a); // undefinedconsole.log(a); // 打印结果：Uncaught ReferenceError: a is not defined case3：函数无返回值时如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。 或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 return undefined。 举例： 123function foo() {}console.log(foo()); // 打印结果：undefined case4：调用函数时，未传参调用函数时，如果没有传参，那么，这个参数的值就是 undefined。 举例： 12345function foo(name) { console.log(name);}foo(); // 调用函数时，未传参。执行函数后的打印结果：undefined 实际开发中，如果调用函数时没有传参，我们可以给形参设置一个默认值： 12345function foo(name) { name = name || 'qianguyihao';}foo(); ES6 之后，上方代码也可以这样写： 123function foo(name = 'qianguyihao') {}foo(); null 和 undefined 有很大的相似性。看看 null == undefined 的结果为 true 也更加能说明这点。 但是 null === undefined 的结果是 false。它们虽然相似，但还是有区别的，其中一个区别是，和数字运算时： 10 + null 结果为 10。 10 + undefined 结果为 NaN。 规律总结： 任何数据类型和 undefined 运算都是 NaN; 任何值和 null 运算，null 可看做 0 运算。 数据类型转换运算符比较算符===，！==等。逻辑算符&amp;&amp;，||，！等。 控制语句if、switch、while、for。懂的都懂，典中典了。 函数与方法函数是对象方法的一部分，不过不重要，会用就行。 函数使用function functionName(){}定义，使用functionName()调用。匿名函数无函数名，一般与事件处理程序一并使用，或分配到变量，使用varName()调用，但这样不如直接命名一个函数，所以这并不常见。 事件对于事件处理器，可以使用匿名函数、有名字的函数赋值到事件处理参数和DOM，如下： btn.onclick = function(){} function eventReact(){} btn.onclick = eventReact() btn.addEventListener('click',eventReact) 其中DOM的事件处理函数需要两个参数，事件名称和处理函数，当然，同第一项写成匿名函数也可以 btn.addEventListener('click', function(){}) DOM的方式可以清除废弃的事件处理器，给监听器注册多个处理器等。 事件的冒泡与捕获这是两个顺序相反的过程，事件捕获时，自祖先元素开始查找。冒泡时，自子元素开始向上，处理事件事，在冒泡阶段注册程序，如果不阻止冒泡链的扩大，则会在所有的父元素同事件执行。但也可以利用冒泡，将重复的子元素事件响应委托到一个父元素中。","link":"/2019/10/10/javascript/"},{"title":"利用github构建静态博客数据库","text":"引言因为使用如hexo的框架搭建博客，是静态的，但是难免会有一些使用动态数据的需求产生，面对这些需求时，选择机械地编写硬编码，再上传生成显然不是一个优雅的做法。 而目前大多框架的主题都带有评论系统，其中支持gitalk的便使用了OAuth以及github中的issue，通过OAuth授权验证，issue作为存储。那么我们可以考虑利用这种模式，将动态数据更新到特定repo的某个issue中，再通过github提供的API访问获取数据。除此之外，关于这个存储repo，虽然不能私有，但是其中的issue可以选择关闭，只有管理员可以浏览编辑。这就只剩下一个问题，数据泄露，如果有比较机密的数据，当然不适合用这种方法了。（不会真有人往博客里写秘密吧，谁把秘密写在博客里，能写在博客的那能叫秘密吗？） 认识gitalk看明白gitalk的工作原理，就成功大半了。 我，前端菜鸡，看到前端代码就头疼，能瞎写绝不优化。差不多就行了。 github token此章参考Gitalk 运作原理，Gitalk，Github文档。token分为三类，gitalk使用OAuth App，属于github的三种token`之一。 GitHub Apps OAuth Apps Personal access tokens OAuth Apps实现了OAuth2.0认证协议，主要针对第三方平台想要通过GitHub API获取用户私密信息时，用户可不必向第三方平台提供GitHub账号密码即可完成认证。通过OAuth Apps授权的token代表的是该授权用户，而不是App，即App本身不具有任何权限。在权限限制上也与GitHub App不同，OAuth App只能读。值得一提的是GitHub使用的是Authorization code grant模式，也是最推荐的模式。以gitalk为例在该模式下的认证流程为 OAth2.0 协议OAuth2 有4个角色： 资源拥有者 (user) 第三方客户端 (client) 资源服务器 (resource server) 认证服务器 (authentication server) Authentication code grant 模式流程如下： user在第三方平台A登录，登录方式是使用另一个平台B的身份信息。 A携带clientID跳转到B的授权页，请user授权。（这个clientID就是A在B登记的OAuth身份标识，这也表明使用OAuth协议前必须先在平台注册登记） user授权A可以从B获取身份信息，grant_code作为凭据。 A的【后台】向B发起access_token申请，携带参数clientID+clientSecret+grant_code。 B验证无误后返回代表该用户的access_token。 A可以使用access_token通过B的API调取user信息了。 可以看出认证授权有两个阶段，这也是OAuth协议被认为安全的关键。第一阶段只能拿到一个临时许可令牌grant_code，可能十几分钟的过期。第二阶段拿access_token。 第一阶段clientID可以保存在前端，比如web页面，跳转认证时直接从前端取，不需要请求后台。grant_code只作为一个用户许可，并不能确保是否是可信任平台发起的请求，所以要验证平台是否可信，通过clientSecret。 第二阶段clientSecret只能保存在后台，而且获取access_token的请求只能由后台服务器发起和接收。这个过程跟前端无关，所以被认为是最安全的。 access_token一般会被保存起来，过期时间会久一些，可能几个月。 既然如此，是否可以说凡是使用OAuth2.0的认证就一定是最安全的呢？并不是，这要看是否使用的规范。gitalk就是一个不规范使用的例子，它把clientSecret也暴露在前端。因为我们没有后台。无后台server。缺点是暴露了clientSecret，不符合OAuth2.0规范。但是在GitHub上这样做是安全的，因为access_token只有读权限，不能对user的repo造成任何损害。 gitalk源码gitalk没有后台server，clientSecret也是保存在前端，它的代理服务器地址。gitalk的代码，使用的代理 1proxy: 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token', 一个公开的免费代理，声称是不会保存任何转发信息。 access_token 1234567get accessToken () {return this._accessToke || window.localStorage.getItem(GT_ACCESS_TOKEN)}set accessToken (token) {window.localStorage.setItem(GT_ACCESS_TOKEN, token)this._accessToken = token} access_token获取之后被保存起来，不关闭浏览器是不需要重复授权的。 comments 123456createIssue () { const { owner, repo, title, body, id, labels, url } = this.options return axiosGithub.post(`/repos/${owner}/${repo}/issues`, { title, labels: labels.concat(id), body: body || `${url} \\n\\n ${ 注意labels后面连接的id，这个id就是文章的唯一标识，一般设置为URL。 GitHub的label长度限制在63字符之内，超过就不能创建Issue。为此可以对URL进行md5哈希，md5后生成128-bit摘要，用16进制表示，长度恒等于32. Issues获取也是根据labels，不同文章的id不同，获取的列表自然也就不同，把Issues作为评论展示出来，这样一个简单的评论系统就完成了。 读取issue这个简单，通过github api就完事了，有一定的次数限制，不过可以添加token授权来解除上限，带上token后续也可以做一些其他的操作，上锁、删除等等。 官方文档：issue API 主要用到的就是获取具体内容，其中的评论等。 1234get https://api.github.com/repos/USER_NAME/repo_NAME/issues/number// 获取第几个issue的内容get https://api.github.com/repos/USER_NAME/repo_NAME/issues/number/comments// 获取第几个issue的评论内容，读取其中的body再解析就行了。 写个XMLHttpRequest请求。 写入issue写入比较麻烦，因为只读的请求是可以匿名的，写入修改是需要授权的，需要编写授权跳转页面，api地址https://github.com/login/oauth/authorize?client_id=YOUR_CLIENT_ID&amp;redirect_uri=http://localhost:8000/home.html 授权之后构造符合post请求的信息发送就可以了，但是要带上token,其中如果使用access token，不能直接明文记录，会被删除，可以分段记录在不同的变量拼接，当然了，会有一定的泄露风险，不过无所谓，只要授权不是最高级别的也没多大问题。 使用octokit但是以上直接通过github API造轮子的办法比较繁琐，文档也没有太多例子，构造、测试非常的麻烦。所以可以直接用轮子，文档：octokit/rest.js，github页面：octokit/rest.js官方描述如下GitHub REST API client for JavaScript，直接查文档就行了。构造octokit对象，把参数填完就可以了。非常方便。 octokit使用注意事项因为使用octokit需要引入模块，官方给出了两种方式。 浏览器 Load @octokit/rest directly from cdn.skypack.dev 123&lt;script type=&quot;module&quot;&gt; import { Octokit } from &quot;https://cdn.skypack.dev/@octokit/rest&quot;;&lt;/script&gt; Node Install with npm install @octokit/rest 12const { Octokit } = require(&quot;@octokit/rest&quot;);// or: import { Octokit } from &quot;@octokit/rest&quot;; 如果使用浏览器的话，直接引用，在script标签里编写函数就可以了。 如果在js文件中使用第二种方式，大概率会报错：Uncaught ReferenceError：require is not defined，因为浏览器环境没有RequireJS，需要另外引入，比较麻烦。可以通过加载定义Require的库，或者使用browerify,webpack等工具将js文件重新打包成带依赖的文件，但是会变大很多。建议还是使用第一种方式。 实例读取issue读取issue >folded1234567891011121314var onload = function () { var url = &quot;https://api.github.com/repos/User_name/repo_name/issues/issue_id;&quot;; var request = new XMLHttpRequest(); var clientID = 'YOUR_clientID'; var clientSecret = 'YOUR_clientSecret'; var req = new XMLHttpRequest(); req.open('GET', url, true); req.send(null); req.onload = function(){ if(req.status === 200){ var json = JSON.parse(req.responseText); } }} 按需解析json即可，匿名读取有限制，每分钟60次，一般没问题，如果需要解除限制，就带上clientID和Secret区请求。 使用octokit使用octokit的实例 >folded123456789101112131415161718192021222324252627&lt;body&gt; &lt;p id=&quot;pre&quot;&gt;hello&lt;/p&gt; &lt;p id=&quot;next&quot;&gt;bye&lt;/p&gt; &lt;script type=&quot;module&quot;&gt; import { Octokit } from &quot;https://cdn.skypack.dev/@octokit/rest&quot;; var pre = document.getElementById(&quot;pre&quot;); pre.onclick = function(){ console.log(&quot;hello&quot;) } next.onclick = function(){ const octokit = new Octokit({ auth:&quot;your_access_token&quot;, userAgent: 'myApp v1.2.3' }) octokit.rest.issues.createComment({ owner:&quot;name&quot;, repo:&quot;repo_name&quot;, issue_number:issue_id, body:&quot;The content you want to send.&quot;, }); } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&gt; 其他的octokit编写也差不多，看文档配参数就行，文档十分完善。 一些bug构建js代码时，会在hexo博客上遇到一些坑，一般是因为其他插件造成的，比如Aplayer的代码注入或是重复载入 Aplayer.js 资源脚本问题，会在js文件头部注入&lt;link&gt;标签，导致报错， 查阅官方文档给出的方式是在配置文件中加入 12aplayer: asset_inject: false 但也很可能没有卵用！最好的方式就是，卸载APlayer，然后重装一个hexo-tag-aplayer（反正我也不在页面内插入音乐盒子，文章里用hexo-tag-aplayer就够了），然后再添加上述配置。 参考gitalk：https://github.com/gitalk/gitalk 利用 github pages 与 github api 搭建博客：https://github.com/eyasliu/blog/issues/2 gitalk的运作原理：https://carl-zk.github.io/blog/2020/03/03/gitalk-%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/ github Issue 作为博客微型数据库的应用：https://removeif.github.io/theme/github-Issue-%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%BE%AE%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%BA%94%E7%94%A8.html 透过Github Action生成数据：https://blog.uiharu.top/archives/generate-links-json-via-github-action.html 利用github api获取issue的想法：https://github.com/isaaxite/blog/issues/44 github文档的issues操作：https://docs.github.com/en/rest/reference/issues github API的调用教程：https://segmentfault.com/a/1190000015144126 利用github issue实现评论插件：https://segmentfault.com/a/1190000011100934 octokit文档：https://octokit.github.io/rest.js/v18 解决require问题：https://stackoverflow.com/questions/19059580/client-on-node-js-uncaught-referenceerror-require-is-not-defined 使用hexo-tag-aplayer以及配置书写：https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#%E4%BB%8B%E7%BB%8D 解决Aplayer注入问题：https://blog.csdn.net/qq_27439819/article/details/105011943","link":"/2021/07/01/%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"title":"Welcome","text":"欢迎访问戴闻濠的博客。还没想好写什么，不过可以随时改，先这样吧。","link":"/2021/07/01/welcome/"},{"title":"HTML笔记","text":"HTML的一些知识点。其实到处都能查到，也不经常写，搞懂就行，标签乱七八糟的，要用再查吧。 标签作为标记性语言，没有编译过程，由浏览器解析。标签即用于给文本增加语义。 html骨架标签 标签名 定义 说明 &lt;html&gt;&lt;/html&gt; HTML标签 页面中最大的标签，我们成为根标签 &lt;head&gt;&lt;/head&gt; 文档的头部 注意在head标签中我们必须要设置的标签是title &lt;titile&gt;&lt;/title&gt; 文档的标题 让页面拥有一个属于自己的网页标题 &lt;body&gt;&lt;/body&gt; 文档的主体 元素包含文档的所有内容，页面内容基本都是放到body里面的 常用标签常用标签 >folded12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE&gt; 定义文档类型。&lt;html&gt; 定义一个 HTML 文档&lt;title&gt; 为文档定义一个标题&lt;body&gt; 定义文档的主体&lt;h1&gt; to &lt;h6&gt; 定义 HTML 标题&lt;p&gt; 定义一个段落&lt;br&gt; 定义简单的折行。&lt;hr&gt; 定义水平线。&lt;!--...--&gt; 定义一个注释&lt;b&gt;定义粗体文本。&lt;i&gt; 定义斜体文本。&lt;strong&gt; 定义语气更为强烈的强调文本。&lt;sub&gt; 定义下标文本。&lt;sup&gt; 定义上标文本。&lt;form&gt; 定义一个 HTML 表单，用于用户输入。&lt;input&gt; 定义一个输入控件&lt;textarea&gt; 定义多行的文本输入控件。&lt;button&gt; 定义按钮。&lt;select&gt; 定义选择列表（下拉列表）。&lt;img&gt; 定义图像。&lt;a&gt; 定义一个链接&lt;link&gt; 定义文档与外部资源的关系。&lt;ul&gt; 定义一个无序列表&lt;ol&gt; 定义一个有序列表&lt;li&gt; 定义一个列表项&lt;table&gt; 定义一个表格&lt;caption&gt; 定义表格标题。&lt;th&gt; 定义表格中的表头单元格。&lt;tr&gt; 定义表格中的行。&lt;td&gt; 定义表格中的单元。&lt;thead&gt; 定义表格中的表头内容。&lt;tbody&gt; 定义表格中的主体内容。&lt;style&gt; 定义文档的样式信息。&lt;div&gt; 定义文档中的节。&lt;head&gt; 定义关于文档的信息&lt;meta&gt; 定义关于 HTML 文档的元信息。&lt;script&gt; 定义客户端脚本。 全部标签全部标签 >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131基础&lt;!DOCTYPE&gt; 定义文档类型。&lt;html&gt; 定义一个 HTML 文档&lt;title&gt; 为文档定义一个标题&lt;body&gt; 定义文档的主体&lt;h1&gt; to &lt;h6&gt; 定义 HTML 标题&lt;p&gt; 定义一个段落&lt;br&gt; 定义简单的折行。&lt;hr&gt; 定义水平线。&lt;!--...--&gt; 定义一个注释格式 &lt;acronym&gt; HTML5不再支持。 定义只取首字母的缩写。&lt;abbr&gt; 定义一个缩写。&lt;address&gt; 定义文档作者或拥有者的联系信息。&lt;b&gt; 定义粗体文本。&lt;bdi&gt;New 允许您设置一段文本，使其脱离其父元素的文本方向设置。&lt;bdo&gt; 定义文本的方向。&lt;big&gt; HTML5不再支持。 定义大号文本。&lt;blockquote&gt; 定义块引用。&lt;center&gt; HTML5不再支持。 HTML 4.01 已废弃。定义居中文本。&lt;cite&gt; 定义引用(citation)。&lt;code&gt; 定义计算机代码文本。&lt;del&gt; 定义被删除文本。&lt;dfn&gt; 定义定义项目。&lt;em&gt; 定义强调文本。 &lt;font&gt; HTML5不再支持。 HTML 4.01 已废弃。 定义文本的字体、尺寸和颜色&lt;i&gt; 定义斜体文本。&lt;ins&gt; 定义被插入文本。&lt;kbd&gt; 定义键盘文本。&lt;mark&gt;New 定义带有记号的文本。&lt;meter&gt;New 定义度量衡。仅用于已知最大和最小值的度量。&lt;pre&gt; 定义预格式文本&lt;progress&gt;New 定义运行中的任务进度（进程）。&lt;q&gt; 定义短的引用。&lt;rp&gt;New 定义不支持 ruby 元素的浏览器所显示的内容。&lt;rt&gt;New 定义字符（中文注音或字符）的解释或发音。&lt;ruby&gt;New 定义 ruby 注释（中文注音或字符）。&lt;s&gt; 定义加删除线的文本。&lt;samp&gt; 定义计算机代码样本。&lt;small&gt; 定义小号文本。&lt;strike&gt; HTML5不再支持。 HTML 4.01 已废弃。 定义加删除线的文本。&lt;strong&gt; 定义语气更为强烈的强调文本。&lt;sub&gt; 定义下标文本。&lt;sup&gt; 定义上标文本。&lt;time&gt;New 定义一个日期/时间&lt;tt&gt; HTML5不再支持。 定义打字机文本。&lt;u&gt; 定义下划线文本。&lt;var&gt; 定义文本的变量部分。&lt;wbr&gt;New 规定在文本中的何处适合添加换行符。表单 &lt;form&gt; 定义一个 HTML 表单，用于用户输入。&lt;input&gt; 定义一个输入控件&lt;textarea&gt; 定义多行的文本输入控件。&lt;button&gt; 定义按钮。&lt;select&gt; 定义选择列表（下拉列表）。&lt;optgroup&gt; 定义选择列表中相关选项的组合。&lt;option&gt; 定义选择列表中的选项。&lt;label&gt; 定义 input 元素的标注。&lt;fieldset&gt; 定义围绕表单中元素的边框。&lt;legend&gt; 定义 fieldset 元素的标题。&lt;datalist&gt;New 规定了 input 元素可能的选项列表。&lt;keygen&gt;New 规定用于表单的密钥对生成器字段。&lt;output&gt;New 定义一个计算的结果框架 &lt;frame&gt; HTML5不再支持。 定义框架集的窗口或框架。&lt;frameset&gt; HTML5不再支持。定义框架集。&lt;noframes&gt; HTML5不再支持。 定义针对不支持框架的用户的替代内容。&lt;iframe&gt; 定义内联框架。图像 &lt;img&gt; 定义图像。&lt;map&gt; 定义图像映射。&lt;area&gt; 定义图像地图内部的区域。&lt;canvas&gt;New 通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。&lt;figcaption&gt;New 定义一个 caption for a &lt;figure&gt; element&lt;figure&gt;New figure 标签用于对元素进行组合。Audio/Video &lt;audio&gt;New 定义声音，比如音乐或其他音频流。&lt;source&gt;New 定义media元素 (&lt;video&gt; 和 &lt;audio&gt;)的媒体资源。media&lt;track&gt;New 为媒体(&lt;video&gt; 和 &lt;audio&gt;)元素定义外部文本轨道。&lt;video&gt;New 定义一个音频或者视频链接 &lt;a&gt; 定义一个链接&lt;link&gt; 定义文档与外部资源的关系。&lt;main&gt; 定义文档的主体部分。&lt;nav&gt;New 定义导航链接列表 &lt;ul&gt; 定义一个无序列表&lt;ol&gt; 定义一个有序列表&lt;li&gt; 定义一个列表项&lt;dir&gt; HTML5不再支持。 HTML 4.01 已废弃。 定义目录列表。&lt;dl&gt; 定义一个定义列表&lt;dt&gt; 定义一个定义定义列表中的项目。&lt;dd&gt; 定义定义列表中项目的描述。&lt;menu&gt; 定义菜单列表。&lt;command&gt;New 定义用户可能调用的命令（比如单选按钮、复选框或按钮）。表格 &lt;table&gt; 定义一个表格&lt;caption&gt; 定义表格标题。&lt;th&gt; 定义表格中的表头单元格。&lt;tr&gt; 定义表格中的行。&lt;td&gt; 定义表格中的单元。&lt;thead&gt; 定义表格中的表头内容。&lt;tbody&gt; 定义表格中的主体内容。&lt;tfoot&gt; 定义表格中的表注内容（脚注）。&lt;col&gt; 定义表格中一个或多个列的属性值。&lt;colgroup&gt; 定义表格中供格式化的列组。样式/节 &lt;style&gt; 定义文档的样式信息。&lt;div&gt; 定义文档中的节。&lt;span&gt; 定义文档中的节。&lt;header&gt;New 定义一个文档头部部分&lt;footer&gt;New 定义一个文档底部&lt;section&gt;New 定义了文档的某个区域&lt;article&gt;New 定义一个文章内容&lt;aside&gt;New 定义其所处内容之外的内容。&lt;details&gt;New 定义了用户可见的或者隐藏的需求的补充细节。&lt;dialog&gt;New 定义一个对话框或者窗口&lt;summary&gt;New 定义一个可见的标题。 当用户点击标题时会显示出详细信息。元信息 &lt;head&gt; 定义关于文档的信息&lt;meta&gt; 定义关于 HTML 文档的元信息。&lt;base&gt; 定义页面中所有链接的默认地址或默认目标。&lt;basefont&gt; HTML5不再支持。 HTML 4.01 已废弃。 定义页面中文本的默认字体、颜色或尺寸。程序 &lt;script&gt; 定义客户端脚本。&lt;noscript&gt; 定义针对不支持客户端脚本的用户的替代内容。&lt;applet&gt; HTML5不再支持。 HTML 4.01 已废弃。 定义嵌入的 applet。&lt;embed&gt;New 定义了一个容器，用来嵌入外部应用或者互动程序（插件）。&lt;object&gt; 定义嵌入的对象。&lt;param&gt; 定义对象的参数。 排版标签&lt;h1&gt;、&lt;p&gt;、&lt;hr /&gt;、&lt;br /&gt;、&lt;div&gt;、&lt;span&gt;、&lt;center&gt;、&lt;pre&gt; 标题使用&lt;h1&gt;至&lt;h6&gt;标签进行定义。&lt;h1&gt;定义最大的标题，&lt;h6&gt;定义最小的标题。具有align属性，属性值可以是：left、center、right。 段落标签&lt;p&gt;把 HTML 文档分割为若干段落。属性：align：值：left center right。属于文本级标签。 文本级标签：p、span、a、b、i、u、em。文本级标签里只能放文字、图片、表单元素。（a标签里不能放a和input） 容器级标签：div、h系列、li、dt、dd。容器级标签里可以放置任何东西。 水平线标签属性： align=&quot;属性值&quot;：设定线条置放位置。属性值可选择：left right center。 size=&quot;2&quot; ：设定线条粗细。以像素为单位，内定为2。 width=&quot;500&quot;或width=&quot;70%&quot;：设定线条长度。可以是绝对值（单位是像素）或相对值。如果设置为相对值的话，内定为100%。 color=&quot;#0000FF&quot;：设置线条颜色。 noshade：不要阴影，即设定线条为平面显示。若没有这个属性则表明线条具阴影或立体。 换行标签&lt;br /&gt;如果希望某段文本强制换行显示，就需要使用换行标签。 &lt;div&gt;和&lt;span&gt;标签div的语义是division“分割”； span的语义就是span“范围、跨度”。 div标签：可以把标签中的内容分割为独立的区块。必须单独占据一行。 span标签：和div的作用一致，但不换行。 &lt;span&gt;和&lt;div&gt;唯一的区别在于：&lt;span&gt;是不换行的，而&lt;div&gt;是换行的。 这两个元素是专门为定义CSS样式而生的。DIV+CSS来实现各种样式。 div标签是一个容器级标签，里面什么都能放，甚至可以放div自己。 span也是表达“小区域、小跨度”的标签，但只是一个文本级的标签。就是说，span里面只能放置文字、图片、表单元素。 span里面不能放p、h、ul、dl、ol、div。 div标签的属性： align=&quot;属性值&quot;：设置块儿的位置。属性值可选择：left、right、 center。 注释HTML 注释的格式如下： 1&lt;!-- 我是 html 注释 --&gt; 字体与链接字体标签： &lt;font&gt;、 &lt;b&gt;、 &lt;u&gt; 、&lt;sup&gt; 、&lt;sub&gt; 超链接 &lt;a&gt; 特殊字符（转义字符） &amp;nbsp;：空格 （non-breaking spacing，不断打空格） &amp;lt;：小于号（less than） &amp;gt;：大于号（greater than） &amp;amp;：符号&amp; &amp;quot;：双引号 &amp;apos;：单引号 &amp;copy;：版权© &amp;trade;：商标™ &amp;#32464;：文字绐。其实，#32464是汉字绐的unicode编码。 可以查的。 下划线、中划线、斜体 &lt;u&gt;：下划线标记 &lt;s&gt;或&lt;del&gt;：中划线标记（删除线） &lt;i&gt;或&lt;em&gt;：斜体标记 上标&lt;sup&gt; 下标&lt;sub&gt;上小标这两个标签容易混淆，怎么记呢？这样记：b的意思是bottom：底部 超链接属性： href：目标URL title：悬停文本。 name：主要用于设置一个锚点的名称。 target：告诉浏览器用什么方式来打开目标页面。target属性有以下几个值： _self：在同一个网页中显示（默认值） _blank：在新的窗口中打开。 _parent：在父窗口中显示 _top：在顶级窗口中显示 外部链接12&lt;a href=&quot;页面.html&quot;&gt;点击进入&lt;/a&gt;&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;点我点我&lt;/a&gt; a是英语anchor“锚”的意思，是一个文本级的标签，href（hypertext reference）：超文本地址。 锚链接作用是在本页面或者其他页面的的不同位置进行跳转。比如说back-to-top就可以利用锚链接。创建一个锚点，也就是说，使用name属性或者id属性给那个特定的位置起个名字。 123&lt;a name=&quot;anchor1&quot;&gt;top&lt;/a&gt;&lt;a href=&quot;#anchor1&quot;&gt;back-to-top&lt;/a&gt;&lt;a href=&quot;2.html#anchor2&quot;&gt;back-to-top&lt;/a&gt; #回到2.html页面的anchor2锚点 邮件链接没什么用。就是链接写成邮箱，点了弹出邮箱。 图表标签写完这个不写了。 img标签如果要想在网页中显示图像，就可以使用img 标签，它是一个单标签。语法如下： 1&lt;img src=&quot;图片的URL&quot; /&gt; 图片类型 能够插入的图片类型是：jpg(jpeg)、gif、png、bmp等。 不能往网页中插入的图片格式是：psd、ai等。 HTML页面不是直接插入图片，而是插入图片的引用地址，所以要先把图片上传到服务器上。 属性： src属性：指图片的路径。英文名称 source。在写图片的路径时，有两种写法：相对路径、绝对路径。 width：图像的宽度。 height：图像的高度。 alt：当图片不可用（无法显示）的时候，代替图片显示的内容。alt是英语 alternate “替代”的意思，代表替换资源。 title：提示性文本。鼠标悬停时出现的文本。 图片的align属性：图片和周围文字的相对位置。属性取值可以是：bottom（默认）、center、top、left、right。 列表标签列表标签分为三种。 无序列表&lt;ul&gt;无序列表中的每一项是&lt;li&gt;，可以嵌套 无序列表嵌套 >folded123456789101112&lt;ul&gt; &lt;li&gt;&lt;b&gt;北京市&lt;/b&gt; &lt;ul&gt; &lt;li&gt;海淀区&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;b&gt;广州市&lt;/b&gt; &lt;ul&gt; &lt;li&gt;天河区&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; 属性：type=&quot;属性值&quot;。属性值可以选： disc(实心原点，默认)，square(实心方点)，circle(空心圆)。 有序列表&lt;ol&gt;差不多，就是有数字序了。 属性：type=&quot;属性值&quot;。属性值可以是：1(阿拉伯数字，默认)、a、A、i、I。结合start属性表示从几开始。 定义列表&lt;dl&gt;&lt;dl&gt;英文单词：definition list，没有属性。dl的子元素只能是dt和dd。 &lt;dt&gt;：definition title 列表的标题，这个标签是必须的 &lt;dd&gt;：definition description 列表的列表项，如果不需要它，可以不加，dd是描述dt的。 定义列表用法非常灵活，可以一个dt配很多dd： dt、dd都是容器级标签，想放什么都可以。 1234567&lt;dl&gt; &lt;dt&gt;购物指南&lt;/dt&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;购物流程&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;会员介绍&lt;/a&gt; &lt;/dd&gt;&lt;/dl&gt; 表格标签表格标签用&lt;table&gt;表示。一个表格&lt;table&gt;是由每行&lt;tr&gt;组成的，每行是由每个单元格&lt;td&gt;组成的。所以，一个表格是由行组成的（行是由列组成的），而不是由行和列组成的。在以前，要想固定标签的位置，唯一的方法就是表格。现在可以通过CSS定位的功能来实现。 &lt;table&gt;的属性： border：边框。像素为单位。 style=&quot;border-collapse:collapse;&quot;：单元格的线和表格的边框线合并（表格的两边框合并为一条） width：宽度。像素为单位。 height：高度。像素为单位。 bordercolor：表格的边框颜色。 align：表格的水平对齐方式。属性值可以填：left right center。注意：这里不是设置表格里内容的对齐方式，如果想设置内容的对齐方式，要对单元格标签&lt;td&gt;进行设置） cellpadding：单元格内容到边的距离，像素为单位。默认情况下，文字是紧挨着左边那条线的，即默认情况下的值为0。注意不是单元格内容到四条边的距离哈，而是到一条边的距离，默认是与左边那条线的距离。如果设置属性dir=&quot;rtl&quot;，那就指的是内容到右边那条线的距离。 cellspacing：单元格和单元格之间的距离（外边距），像素为单位。默认情况下的值为0 bgcolor=&quot;#99cc66&quot;：表格的背景颜色。 background=&quot;路径src/...&quot;：背景图片。背景图片的优先级大于背景颜色。 bordercolorlight：表格的上、左边框，以及单元格的右、下边框的颜色 bordercolordark：表格的右、下边框，以及单元格的上、左的边框的颜色这两个属性的目的是为了设置3D的效果。 dir：公有属性，单元格内容的排列方式(direction)。 可以 取值：ltr：从左到右（left to right，默认），rtl：从右到左（right to left）既然说dir是共有属性，如果把这个属性放在任意标签中，那表明这个标签的位置可能会从右开始排列。 &lt;tr&gt;：行一个表格就是一行一行组成的。 属性： dir：公有属性，设置这一行单元格内容的排列方式。可以取值： ltr：从左到右（left to right，默认） rtl：从右到左（right to left） bgcolor：设置这一行的单元格的背景色。注：没有background属性，即：无法设置这一行的背景图片，如果非要设置，可以用css实现。 height：一行的高度 align=&quot;center&quot;：一行的内容水平居中显示，取值：left、center、right valign=&quot;center&quot;：一行的内容垂直居中，取值：top、middle、bottom &lt;td&gt;：单元格属性： align：内容的横向对齐方式。属性值可以填：left right center。如果想让每个单元格的内容都居中，这个属性太麻烦了，以后用css来解决。 valign：内容的纵向对齐方式。属性值可以填：top middle bottom width：绝对值或者相对值(%) height：单元格的高度 bgcolor：设置这个单元格的背景色。 background：设置这个单元格的背景图片。 单元格的合并单元格的属性： colspan：横向合并。例如colspan=&quot;2&quot;表示当前单元格在水平方向上要占据两个单元格的位置。 rowspan：纵向合并。例如rowspan=&quot;2&quot;表示当前单元格在垂直方向上要占据两个单元格的位置。 框架标签如果我们希望在一个网页中显示多个页面，那框架标签就派上用场了。frameset和frame已经从 Web标准中删除，建议使用 iframe 代替。 &lt;frameset&gt;以及&lt;frame&gt;内嵌框架内嵌框架用&lt;iframe&gt;表示。&lt;iframe&gt;是&lt;body&gt;的子标记。 内嵌框架inner frame：嵌入在一个页面上的框架(仅仅IE、新版google浏览器支持) 表单标签表单标签用&lt;form&gt;表示，用于与服务器的交互。表单就是收集用户信息的，就是让用户填写的、选择的。 属性： name：表单的名称，用于JS来操作或控制表单时使用； id：表单的名称，用于JS来操作或控制表单时使用； action：指定表单数据的处理程序，一般是PHP，如：action=“login.php” method：表单数据的提交方式，一般取值：get(默认)和post 注意：表单和表格嵌套时，是在&lt;form&gt;标记中套&lt;table&gt;标记。 form标签里面的action属性和method属性，action属性就是表示，表单将提交到哪里。 method属性表示用什么HTTP方法提交，有get、post两种。 有点多，不写了。等我真用到再说。 多媒体标签。。。 废弃标签有很多，是因为html规范一直变化导致的，当然也因为回归本心，html就用于描述语义，很多像样式描述的标签被弃用，想做个集合。算了，不常用的标签都可以视作废弃标签。 元素HTML 元素以开始标签起始，结束标签终止，内容是开始结束之间的内容，某些 元素具有空内容，空元素在开始标签中进行关闭（以开始标签的结束而结束），大多数 HTML 元素可拥有属性。 属性属性可以在元素中添加附加信息，一般描述于开始标签。以名称/值对的形式出现，**比如：name=”value”**。 全局属性全局属性 >folded12345678910111213141516accesskey 设置访问元素的键盘快捷键。class 规定元素的类名（classname）contenteditable 规定是否可编辑元素的内容。contextmenu 指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单data-* 用于存储页面的自定义数据dir 设置元素中内容的文本方向。draggable 指定某个元素是否可以拖动dropzone 指定是否将数据复制，移动，或链接，或删除hidden hidden 属性规定对元素进行隐藏。id 规定元素的唯一 idlang 设置元素中内容的语言代码。spellcheck 检测元素是否拼写错误style 规定元素的行内样式（inline style）tabindex 设置元素的 Tab 键控制次序。title 规定元素的额外信息（可在工具提示中显示）translate 指定是否一个元素的值在页面载入时是否需要翻译 不想写了，要用再查吧。","link":"/2019/10/10/HTML/"},{"title":"CSS笔记","text":"CSS的学习记录。 样式属性，学个大致框架，要用还得查，用集成的css框架比较好。比如bootstrap什么的。 CSS单位绝对：in、cm、mm、pt、pc 相对：px、em：印刷单位，相当于12个点、% 一般用px得了。懒。 CSS语法键值对。选择器{k: v; k: v;} 注释/*xxxx*/写在&lt;style&gt;&lt;/style&gt;里 CSS属性以下属性值中，括号中的内容表示 sublime 中的快捷键。 字体颜色：（c） 1color:red; color 属性的值，可以是英语单词，比如 red、blue、yellow 等等；也可以是 rgb、十六进制(后期详细讲)。 字号大小：（fos） 1font-size:40px; font 就是“字体”，size 就是“尺寸”。px 是“像素”。单位必须加，不加不行。 背景颜色：（bgc） 1background-color: blue; background 就是“背景”。 加粗：（fwb） 1font-weight: bold; font 是“字体” weight 是“重量”的意思，bold 粗。 不加粗：（fwn） 1font-weight: normal; normal 就是正常的意思。 斜体：（fsi） 1font-style: italic; italic 就是“斜体”。 不斜体：（fsn） 1font-style: normal; 下划线：（tdu） 1text-decoration: underline; decoration 就是“装饰”的意思。 没有下划线：（tdn） 1text-decoration:none; 定位属性CSS的定位属性有三种，分别是绝对定位、相对定位、固定定位。 position: absolute; &lt;!-- 绝对定位 --&gt; position: relative; &lt;!-- 相对定位 --&gt; position: fixed; &lt;!-- 固定定位 --&gt; 相对定位相对定位：让元素相对于自己原来的位置，进行位置调整（可用于盒子的位置微调）。 背景属性中，是通过如下格式： 1background-position:向右偏移量 向下偏移量; 相对定位属性，是通过如下格式： 123position: relative;left: 50px;top: 50px; 相对定位的举例： 12345678910111213141516171819202122232425&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .div1{ width: 200px; height: 200px; border: 1px solid red; } .div2{ position: relative;/*相对定位：相对于自己原来的位置*/ left: 50px;/*横坐标：正值表示向右偏移，负值表示向左偏移*/ top: 50px;/*纵坐标：正值表示向下偏移，负值表示向上偏移*/ width: 200px; height: 200px; border: 1px solid red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;div1&quot;&gt;有生之年&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;狭路相逢&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 相对定位不脱标相对定位：不脱标，老家留坑，别人不会把它的位置挤走。 也就是说，相对定位的真实位置还在老家，只不过影子出去了，可以到处飘。 相对定位的用途如果想做“压盖”效果（把一个div放到另一个div之上），我们一般不用相对定位来做。相对定位，就两个作用： （1）微调元素 （2）做绝对定位的参考，子绝父相 相对定位的定位值 left：盒子右移 right：盒子左移 top：盒子下移 bottom：盒子上移 PS：负数表示相反的方向。 ↘： 123position: relative;left: 40px;top: 10px; ↙： 123position: relative;right: 100px;top: 100px; ↖： 123position: relative;right: 100px;bottom: 100px; 绝对定位这个可以参考github前端学习 绝对定位：定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。 格式举例如下： 123position: absolute; /*绝对定位*/left: 10px; /*横坐标*/top/bottom: 20px; /*纵坐标*/ 绝对定位脱标绝对定位的盒子脱离了标准文档流。 所以，所有的标准文档流的性质，绝对定位之后都不遵守了。 绝对定位之后，标签就不区分所谓的行内元素、块级元素了，不需要display:block就可以设置宽、高了。 绝对定位的参考点（重要）（1）如果用top描述，那么参考点就是页面的左上角，而不是浏览器的左上角： （2）如果用bottom描述，那么参考点就是浏览器首屏窗口尺寸（好好理解“首屏”二字），对应的页面的左下角： “首屏”就是页面没卷动时的第一页，用bottom的定位的时候，参考的是浏览器首屏大小对应的页面左下角。 以盒子为参考点一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。 以下几点需要注意。 （1） 要听最近的已经定位的祖先元素的，不一定是父亲，可能是爷爷： 123456&lt;div class=&quot;box1&quot;&gt; 相对定位 &lt;div class=&quot;box2&quot;&gt; 没有定位 &lt;p&gt;&lt;/p&gt; 绝对定位，将以box1为参考，因为box2没有定位，box1就是最近的父辈元素 &lt;/div&gt;&lt;/div&gt; 再比如： 12345&lt;div class=&quot;box1&quot;&gt; 相对定位 &lt;div class=&quot;box2&quot;&gt; 相对定位 &lt;p&gt;&lt;/p&gt; 绝对定位，将以box2为参考，因为box2是自己最近的父辈元素 &lt;/div&gt;&lt;/div&gt; （2）不一定是相对定位，任何定位，都可以作为儿子的参考点： 子绝父绝、子绝父相、子绝父固，都是可以给儿子定位的。但是在工程上，如果子绝、父绝，没有一个盒子在标准流里面了，所以页面就不稳固，没有任何实战用途。 工程应用： “子绝父相”有意义：这样可以保证父亲没有脱标，儿子脱标在父亲的范围里面移动。于是，工程上经常这样做： 父亲浮动，设置相对定位（零偏移），然后让儿子绝对定位一定的距离。 （3）绝对定位的儿子，无视参考的那个盒子的padding： 父亲div的padding，p是div的内容区域。此时，如果div相对定位，p绝对定位，那么，p将无视父亲的padding，在border内侧为参考点，进行定位 工程应用： 绝对定位非常适合用来做“压盖”效果。 让绝对定位中的盒子在父亲里居中 我们知道，如果想让一个标准流中的盒子在父亲里居中（水平方向看），可以将其设置margin: 0 auto属性。 可如果盒子是绝对定位的，此时已经脱标了，如果还想让其居中（位于父亲的正中间），可以这样做： 12345678div { width: 600px; height: 60px; position: absolute; 绝对定位的盒子 left: 50%; 首先，让左边线居中 top: 0; margin-left: -300px; 然后，向左移动宽度（600px）的一半} 如上方代码所示，我们先让这个宽度为600px的盒子，左边线居中，然后向左移动宽度（600px）的一半，就达到效果了。 我们可以总结成一个公式： left:50%; margin-left:负的宽度的一半 固定定位固定定位：就是相对浏览器窗口进行定位。无论页面如何滚动，这个盒子显示的位置不变。 用途1：网页右下角的“返回到顶部” 比如我们经常看到的网页右下角显示的“返回到顶部”，就可以固定定位。 123456789101112131415&lt;style type=&quot;text/css&quot;&gt; .backtop{ position: fixed; bottom: 100px; right: 30px; width: 60px; height: 60px; background-color: gray; text-align: center; line-height:30px; color:white; text-decoration: none; /*去掉超链接的下划线*/ } &lt;/style&gt; 用途2：顶部导航条 我们经常能看到固定在网页顶端的导航条，可以用固定定位来做。 需要注意的是，假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top。 顶部导航条的实现如下： 顶部导航 >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *{ margin: 0; padding: 0; }body{ /*为什么要写这个？*/ /*不希望我们的页面被nav挡住*/ padding-top: 60px; /*IE6不兼容固定定位，所以这个padding没有什么用，就去掉就行了*/ _padding-top:0; } .nav{ position: fixed; top: 0; left: 0; width: 100%; height: 60px; background-color: #333; z-index: 99999999; } .inner_c{ width: 1000px; height: 60px; margin: 0 auto; } .inner_c ul{ list-style: none; } .inner_c ul li{ float: left; width: 100px; height: 60px; text-align: center; line-height: 60px; } .inner_c ul li a{ display: block; width: 100px; height: 60px; color:white; text-decoration: none; } .inner_c ul li a:hover{ background-color: gold; } p{ font-size: 30px; } .btn{ display: block; width: 120px; height: 30px; background-color: orange; position: relative; top: 2px; left: 1px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;div class=&quot;inner_c&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网页栏目&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; z-index属性：z-index属性：表示谁压着谁。数值大的压盖住数值小的。 有如下特性： （1）属性值大的位于上层，属性值小的位于下层。 （2）z-index值没有单位，就是一个正整数。默认的z-index值是0。 （3）如果大家都没有z-index值，或者z-index值一样，那么在HTML代码里写在后面，谁就在上面能压住别人。定位了的元素，永远能够压住没有定位的元素。 （4）只有定位了的元素，才能有z-index值。也就是说，不管相对定位、绝对定位、固定定位，都可以使用z-index值。而浮动的元素不能用。 （5）从父现象：父亲怂了，儿子再牛逼也没用。意思是，如果父亲1比父亲2大，那么，即使儿子1比儿子2小，儿子1也能在最上层。 z-index属性的应用还是很广泛的。当好几个已定位的标签出现覆盖的现象时，我们可以用这个z-index属性决定，谁处于最上方。也就是层级的应用。 层级： （1）必须有定位（除去static） （2）用z-index来控制层级数。 CSS floatcss中一共有三种手段，使一个元素脱离标准文档流： （1）浮动 （2）绝对定位 （3）固定定位 浮动的性质浮动是css里面布局用的最多的属性。 浮动的元素脱标 脱标即脱离标准流。一旦一个元素浮动了，那么，将能够并排了，并且能够设置宽高了。无论它原来是个div还是个span。所有标签，浮动之后，已经不区分行内、块级了。 浮动的元素互相贴靠 我们给三个div均设置了float: left;属性之后，然后设置宽高。当改变浏览器窗口大小时，div的贴靠效果：如果有足够空间，那么就会靠着。如果没有足够的空间，去贴左墙。 浮动的元素有“字围”效果 让div浮动，p不浮动。div挡住了p，但不会挡住p中的文字，形成“字围”效果。标准流中的文字不会被浮动的盒子遮挡住。（文字就像水一样）关于浮动，为避免混乱，我们在初期一定要遵循一个原则：永远不是一个东西单独浮动，浮动都是一起浮动，要浮动，大家都浮动。 收缩 收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度（这点非常像行内元素）。 CSS样式表与选择器样式表插入样式表的方法有三种: 外部样式表(External style sheet) 内部样式表(Internal style sheet) 内联样式(Inline style) 外部样式表外部样式表1&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt; 浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。 外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。 内部样式表当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 &lt;style&gt; 标签在文档头部定义内部样式表，就像这样: 内部样式表1234567&lt;head&gt; &lt;style&gt; hr {color:sienna;} p {margin-left:20px;} body {background-image:url(&quot;images/back40.gif&quot;);} &lt;/style&gt; &lt;/head&gt; 内联样式由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势，当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距： 内联样式1&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt; 多重样式以及优先级一般情况下，优先级如下： （内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式 多重样式123456789101112&lt;head&gt; &lt;!-- 外部样式 style.css --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;/&gt; &lt;!-- 设置：h3{color:blue;} --&gt; &lt;style type=&quot;text/css&quot;&gt; /* 内部样式 */ h3{color:green;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;测试！&lt;/h3&gt; &lt;/body&gt; 一般我也不用，用的时候可以查，关于样式表、选择器优先级，有对应的计算公式给出，服务于多个css选择器作用，即为“层叠式”，查阅CSS样式优先级。 选择器CSS 选择器：就是指定 CSS 要作用的标签，那个标签的名称就是选择器。意为：选择哪个容器。 CSS 的选择器分为两大类：基本选择题和扩展选择器。 基本选择器： 标签选择器：针对一类标签 ID 选择器：针对某一个特定的标签使用 类选择器：针对你想要的所有标签使用 通用选择器（通配符）：针对所有的标签都适用（不建议使用） 标签选择器标签选择器，选择的是页面上所有这种类型的标签，所有的标签，都可以是选择器。比如 ul、li、label、dt、dl、input。无论这个标签藏的多深，一定能够被选择上。 1p{ font-size:14px; } ID 选择器：规定用#来定义，针对某一个特定的标签来使用，只能使用一次。css 中的 ID 选择器以”#”来定义。 123456&lt;style&gt; #mytitle{ border:3px dashed green; }&lt;/style&gt;&lt;body&gt; &lt;h1 id=&quot;mytitle&quot;&gt;&lt;/h1&gt;&lt;/body&gt; 类选择器：规定用圆点.来定义，针对你想要的所有标签使用。优点：灵活。css 中用.来表示类。类选择器可以被多种标签使用，同一个标签也可以使用多个类选择器。用空格隔开。 1234.css.one{ width:800px; }&lt;h1 class=one&gt; &lt;/h1&gt; 关于id与类，类上样式，id 上行为，id 是 js 用的。js 要通过 id 属性得到标签，所以 css 层面尽量不用 id，另一层面，我们会认为一个有 id 的元素，有动态效果。 通配符*，匹配任何标签，不建议用。 高级选择器后代、交集、并集选择器。我就写个博客玩，不写前端，先不学了。doge.jpg 好像还是得用一下，写一点吧。 后代：用空格隔开，表示所有属于 E 元素后代的 F 元素，有这个样式。 12345678&lt;style type=&quot;text/css&quot;&gt; h3 b i { color: red; } .div1 p { color: red; }&lt;/style&gt; 空格就表示后代。定义了&lt;h3&gt;标签中的&lt;b&gt;标签中的&lt;i&gt;标签的样式。h3 和 b 和 i 标签不一定是连续紧挨着的，只要保持一个后代的关联即可。即不一定要是儿子。里面可以包含类以及id选择器。只是表示一种祖先结构。 交集：定义交集选择器的时候，两个选择器之间紧密相连。一般是以标签名开头，比如div.haha，再比如p.special。如果后一个选择器是类选择器，则写为div.special；如果后一个选择器 id 选择器，则写为div#special。 123h3.special { color: red;} 选择的元素要求同时满足两个条件：必须是 h3 标签，然后必须是 special 标签。 并集：定义的时候用逗号隔开 123p,h1,#mytitle,.one { color: red;} 则上述标签都会被渲染。 伪类（伪类选择器）伪类：同一个标签，根据其不同的种状态，有不同的样式。这就叫做“伪类”。伪类用冒号来表示。 比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。 静态伪类和动态伪类伪类选择器分为两种。 （1）静态伪类：只能用于超链接的样式。如下： :link 超链接点击之前 :visited 链接被访问过之后 PS：以上两种样式，只能用于超链接。 （2）动态伪类：针对所有标签都适用的样式。如下： :hover “悬停”：鼠标放到标签上的时候 :active “激活”： 鼠标点击标签，但是不松手时。 :focus 是某个标签获得焦点时的样式（比如某个输入框获得焦点） 超链接a标签超链接的四种状态 a标签有4种伪类（即对应四种状态），要求背诵。如下： :link “链接”：超链接点击之前 :visited “访问过的”：链接被访问过之后 :hover “悬停”：鼠标放到标签上的时候 :active “激活”： 鼠标点击标签，但是不松手时。 对应的代码如下： 123456789101112131415161718192021&lt;style type=&quot;text/css&quot;&gt; /*让超链接点击之前是红色*/ a:link{ color:red; } /*让超链接点击之后是绿色*/ a:visited{ color:orange; } /*鼠标悬停，放到标签上的时候*/ a:hover{ color:green; } /*鼠标点击链接，但是不松手的时候*/ a:active{ color:black; }&lt;/style&gt; 在css中，这四种状态必须按照固定的顺序写： a:link 、a:visited 、a:hover 、a:active CSS特性继承： 关于文字样式的属性，都具有继承性。这些属性包括：color、 text-开头的、line-开头的、font-开头的。 关于盒子、定位、布局的属性，都不能继承。 层叠： 计算权重和就近。 写点小网站就不用管了，反正都是硬编码。 CSS盒模型盒模型，英无论是div、span、还是a都是盒子。但是，图片、表单元素一律看作是文本，它们并不是盒子。这个很好理解，比如说，一张图片里并不能放东西，它自己就是自己的内容。 一个盒子中主要的属性就5个：width、height、padding、border、margin。如下： width和height：内容的宽度、高度（不是盒子的宽度、高度）。 padding：内边距。 border：边框。 margin：外边距。 不写了，一张图的事。 paddingpadding是4个方向的，所以我们能够分别描述4个方向的padding。 方法有两种，第一种写小属性；第二种写综合属性，用空格隔开。 小属性的写法： 1234padding-top: 30px;padding-right: 20px;padding-bottom: 40px;padding-left: 100px; 综合属性的写法：(上、右、下、左)（顺时针方向，用空格隔开。margin的道理也是一样的） 1padding:30px 20px 40px 100px; 如果写了四个值，则顺序为：上、右、下、左。 如果只写了三个值，则顺序为：上、右、下。左和右一样。 如果只写了两个值，比如说： 1padding: 30px 40px; 则顺序等价于：30px 40px 30px 40px; 用小属性层叠大属性。比如： 12padding: 20px;padding-left: 30px; 则左30，上右下20。 下面的写法： 12padding-left: 30px;padding: 20px; 第一行的小属性无效，因为被第二行的大属性层叠掉了。 borderborder就是边框。边框有三个要素：像素（粗细）、线型、颜色。 12345.div1{ width: 10px; height: 10px; border: 2px solid red;} 颜色如果不写，默认是黑色。另外两个属性如果不写，则无法显示边框。 border属性是能够被拆开的，有两大种拆开的方式： （1）按三要素拆开：border-width、border-style、border-color。（一个border属性是由三个小属性综合而成的） （2）按方向拆开：border-top、border-right、border-bottom、border-left。 一个border属性，是由三个小属性综合而成的。如果某一个小属性后面是空格隔开的多个值，那么就是上右下左的顺序。举例如下： 123border-width:10px 20px;border-style:solid dashed dotted;border-color:red green blue yellow; 练习用border画三角形。 Sass 一日游两种后缀名（两种语法）sass 有两种后缀名文件： （1）.sass：对空格敏感。不使用大括号和分号，所以每个属性之间是通过换行来分隔。 比如： 123h1 color: #000 background: #fff 这种语法是类ruby的语法，和CSS的语法相比，相差较大。所以，在3.0版本中就引入了.scss的语法。 （2）.scss：是css语法的超集，可以使用大括号和分号。 比如： 1234h1 { color: #000; background: #fff;} 注意：一个项目中可以混合使用两种语法，但是一个文件中不能同时使用两种语法。 两种格式之间的转换： 我们在工程目录下新建main.scss，输入如下代码： 1234*{ margin: 0; padding: 0;} 然后输入如下命令，就可以将上面的main.scss转化为main.sass： 1sass-convert main.scss main.sass 打开生成的main.sass，内容如下： 1234* margin: 0 padding: 0 变量语法Sass 是通过$符号来声明变量。 （1）我们新建一个文件_variables.scss，这个文件专门用来存放变量，然后在其他的文件中引入_variables.scss即可。 因为这个文件只需要存储变量，并不需要它编译出对应的 css 文件，所以我们给文件名的前面加了下划线，意思是声明为局部文件。 我们在这个文件中，声明两个字体变量： 123$font1: Braggadocio, Arial, Verdana, Helvetica, sans-serif;$font2: Arial, Verdana, Helvetica, sans-serif; （2）新建文件main.scss，在里面引入步骤（1）中的变量文件： 123456789@import &quot;variables&quot;; // 引入变量文件.div1{ font-family: $font1;}.div2{ font-family: $font2;} 基于 Sass 的既定规则： 没有文件后缀名时，Sass 会自动添加 .scss 或者 .sass 的后缀（具体要看已经存在哪个后缀的文件）。 同一目录下，局部文件和非局部文件不能重名。 对应生成的main.css文件如下： main.css 12345678910/* line 9, ../sass/main.scss */.div1 { font-family: Braggadocio, Arial, Verdana, Helvetica, sans-serif;}/* line 13, ../sass/main.scss */.div2 { font-family: Arial, Verdana, Helvetica, sans-serif;} 注释语法单行注释： 1//我是单行注释 块级注释： 12345/* 我是块级注释 哈哈*/ 二者的区别是：单行注释不会出现在自动生成的css文件中。","link":"/2019/10/10/css/"},{"title":"Hexo食用指北","text":"这是一篇对hexo以及typora等博客工具的食用说明手册，随时补充。 总览​ hexo静态博客，简洁大气，个人比较中意。typora作为轻量级的markdown编辑器，界面也比较简洁，当然在支持上不够完全。导致了一些markdown语法的页面渲染与本地有所区别，特此记录。​ 也可以考虑换个大型的编辑器？ Hexohexo插件​ hexo插件比较丰富，可以在官方插件页下载使用插件。 hexo-filter-flowchat渲染flow图， hexo-filter-mermaid-diagrams渲染mermaid和diagrams， hexo-filter-sequence渲染序列图， live2d-widget看板娘，没啥用，还有可能挡住内容和按钮，减慢加载速度。 hexo-bilibili-card插入哔哩哔哩视频卡片具体有没用，好不好用有待测试。 hexo-blog-encrypt文章加密，确实可以加密，但是解密之后好像样式会崩。 hexo标签​ hexo使用标签语言可以实现丰富页面的媒体展示。hexo官方标签插件介绍，不能嵌入到markdown语法中。 quote引用 quote123{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %} 俱往矣，数风流人物，还看今朝 毛泽东沁园春·雪 code block代码块 code12345678{% codeblock [title] [lang:language] [url] [link text] [additional options] %}{% codeblock action_logic.vhd lang:vhdl https://github.com/scutLMG/pixels_plane-VHDL %}library IEEE;use IEEE.STD_LOGIC_1164.ALL;use IEEE.STD_LOGIC_ARITH.ALL;use IEEE.STD_LOGIC_UNSIGNED.ALL;{% endcodeblock %} action_logic.vhdpixels_plane-VHDL1234library IEEE;use IEEE.STD_LOGIC_1164.ALL;use IEEE.STD_LOGIC_ARITH.ALL;use IEEE.STD_LOGIC_UNSIGNED.ALL; 和markdown语法的区别在于可以添加标题和链接及其名字。markdown语法中强行写入标题，会导致编辑器中无法识别并分配上色方案，但是hexo网页渲染是没问题的，所以其实区别不大。 YouTube视频 youtube1{% youtube video_id [type] [cookie] %} img图片 img1{% img [class names] /path/to/image [width] [height] '&quot;title text&quot; &quot;alt text&quot;' %} title text为悬停显示名称，alt text为图像标题。图片路径的名称不要带空格，特别是像通过批量重命名的图片，名称就有空格，往往无法显示。 link链接 link1{% link text url [external] [title] %} 博客加入了链接，不如`markdown`自带的方便好用。 ​ 摘要 在markdown文件中使用&lt;!--more--&gt;可以将其之上的文字划分为摘要，在主页时，文章只显示摘要和阅读更多按钮。 ​ hexo命令hexo clean 清除旧的缓存，source文件夹中的文件不会被清除。 hexo g生成博客 hexo s本地运行博客预览，可以进行实时的样式、文章修改（当然了，还是要刷新的） hexo d上传到github hexo new page page_name生成新页面时使用，生成后要在配置文件内添加导航分栏，自定义渲染以及布局文件。 ​ Front-matter​ front-matter似乎是属于yaml的一种书写方式。写在.md文件的头部，定义其表现形式，使用三重虚线包围 Front Matter，Hexo-Front-matter，一般就下面几个参数。 参数 描述 默认值 layout 布局 config.default_layout title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） 其他​ Typora主要是markdown语法和Typora的显示兼容。 Markdown语法已经很熟练了，而且编辑器大部分都很友好，懒得写了。可查询网页markdown指南中文版，以及Typora支持，有不太熟悉的再写到下面。 插入空行使用：TAB+空格，&lt;/br&gt;标签等等。 ​ 其他的待补充。 Bulma一种css框架。 按钮 Info Success Warning Danger 123456&lt;div class=&quot;buttons&quot;&gt; &lt;button class=&quot;button is-info&quot;&gt;Info&lt;/button&gt; &lt;button class=&quot;button is-success&quot;&gt;Success&lt;/button&gt; &lt;button class=&quot;button is-warning&quot;&gt;Warning&lt;/button&gt; &lt;button class=&quot;button is-danger&quot;&gt;Danger&lt;/button&gt;&lt;/div&gt; 光有按钮肯定是不行的，一般我们还需要给按钮增加事件，比如点击下面的按钮，可以显示一条一言（Hitokoto）。 显示一言 ↑↑↑ 试着点击“显示一言”！ function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } }); } 12345678910111213141516&lt;button class=&quot;button is-info&quot; onclick=&quot;showHitokoto(event)&quot;&gt;显示一言&lt;/button&gt;&lt;blockquote class=&quot;hitokoto&quot;&gt;↑↑↑ 试着点击“显示一言”！&lt;/blockquote&gt;&lt;script&gt;function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } });}&lt;/script&gt; 进度条 12345&lt;progress class=&quot;progress is-info&quot; value=&quot;20&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-success&quot; value=&quot;40&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-warning&quot; value=&quot;60&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-danger&quot; value=&quot;80&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-info&quot; max=&quot;100&quot;&gt;&lt;/progress&gt; 标签页 Pictures Music Videos Documents Pixabay 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材… 网易云音乐 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。 哔哩哔哩 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。 石墨文档 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存… .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div class=&quot;tabs is-toggle&quot;&gt;&lt;ul&gt;&lt;li class=&quot;is-active&quot;&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-image&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Pictures&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-music&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Music&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-film&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Videos&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;far fa-file-alt&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Documents&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;{% raw %}&lt;div id=&quot;Pictures&quot; class=&quot;tab-content&quot; style=&quot;display: block;&quot;&gt;{% endraw %}[Pixabay](https://pixabay.com/zh/) 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材...{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Music&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[网易云音乐](https://music.163.com/) 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Videos&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[哔哩哔哩](https://www.bilibili.com/) 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Documents&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[石墨文档](https://shimo.im/) 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存...{% raw %}&lt;/div&gt;{% endraw %}&lt;style type=&quot;text/css&quot;&gt;.content .tabs ul { margin: 0; }.tab-content { display: none; }&lt;/style&gt;&lt;script&gt;function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active');}&lt;/script&gt; 彩色突出 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-info&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus//) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-success&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-warning&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;div class=&quot;notification is-danger&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-success&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-warning&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 123{% raw %}&lt;article class=&quot;message is-danger&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 活用 Bulma 美化 Icarus 文章 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 12345{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-header&quot;&gt;{% endraw %}活用 Bulma 美化 Icarus 文章{% raw %}&lt;/div&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://ppoffice.github.io/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 让简介不出现在正文我们知道 Hexo 用 &lt;!-- more --&gt; 可以分隔简介和正文部分，但这样简介也会在正文中出现，如果我们不想让简介部分出现在正文呢？ 这里的内容只会出现在 简介 .post-summary { display: none; } 这里的内容只会出现在 正文 12345678910111213{% raw %}&lt;div class=&quot;post-summary&quot;&gt;{% endraw %}这里的内容只会出现在 **简介**{% raw %}&lt;/div&gt;{% endraw %}&lt;!-- more --&gt;&lt;style type=&quot;text/css&quot;&gt;.post-summary { display: none; }&lt;/style&gt;这里的内容只会出现在 **正文** 封面图来源声明 &nbsp;&nbsp; Vector Landscape Vectors by Vecteezy 1234&lt;a class=&quot;tag is-dark is-medium&quot; href=&quot;https://www.vecteezy.com/free-vector/vector-landscape&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fas fa-camera&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;Vector Landscape Vectors by Vecteezy&lt;/a&gt; 这就是关于 Icarus 的高级玩法了。懒得写了，复制imaegoo的，似乎在typora中，不能即时显示渲染情况。","link":"/2021/07/15/hexo-use/"},{"title":"塞尔达开荒流程","text":"塞尔达开荒流程以及攻略。 初始能力获取初始台地四神庙： 1、宝箱拿衣服国王房子（貌似要开全神庙离开台地），2、兽肉（野猪）鲈鱼、辣椒（暖暖草果）（雪山怪物据点下）做成料理（火辣海陆煎烤）给国王，3、强行爬到到山顶。 或者强制手持（方弹放地上，收回武器同时卸盾，捡炸弹扔掉） 磁力炸弹时停冰 血量耐力兑换一颗心或耐力，解锁一个回忆。前往哈特诺村神庙。 共37个。需要720卢比。 进入神庙，自动存档，原路出神庙 寄存心心或耐力后手动保存一个存档 读取出神庙后的自动档，进入神庙 平台机关，相机。按住防御（ZL），同时按下L（启动相机）与左摇杆（蹲下） 仍能调查，按A调查出现照片 删除照片，快速快速快速按+打开背包手持物品查看回忆，无法读取，返回，可以控制平台 成功，读取手动档，血还在，寄存也还在 回忆地图 位置 全塔打开平原之塔、丘陵、双子山、哈特诺之塔。费罗尼、拉涅尔 白马与马具先随便抓一只：去圣山找耐力药原料 备好冰箭，约两轮耐力，初始冰箭位置，初始台地精灵之森沼泽，造冰。 ![image-20200614232633561](D:\\CSlearning\\blog essay\\游\\image-20200614232633561.png) 平原之塔平原外围驿站 完成任务获得皇家马具 古代马具：马鞍：马神泉（湖塔） 缰绳：圣山樱花树（丘陵） 满心料理满耐力料理丘陵之塔：圣山：榴莲苹果耐力萝卜。 费罗尼：榴莲 魔吉拉面具顺便把石头人打了 大精灵之泉先开卡卡利科村100卢比（100，500，1000，10000） 第二个大妖精西莎在塔邦挞，“塔邦挞之塔”往南。500卢比，在塔邦挞大桥马宿找一个寻找大妖精之泉的NPC，会送500卢比 马神泉1000 拍照哈特诺古代研究所，强持。 发展圣山采矿，苹果、松露、萝卜榴莲、毅力蘑菇，（拍卢比兔 ） 沙地靴，雪地靴格鲁德高地八位英雄和剑，拍照 雷鸣头盔解放雷兽，完成支线 10个树莓（小女孩），一个榴莲（去沙漠大妖精给）（兵营卫兵），10个打火石（首饰店），莫尔德拉吉克的肝脏（兵营卫兵） 橡胶套害怕打雷支线任务（费罗尼） 神庙一：托.雅萨（丘陵之塔）雷台之地神庙 神庙二：丘卡.纳塔（费罗尼） 卓拉套、火山套、女装、防寒套卓拉套：国王、国王右侧看向碎脊点的红色人鱼的拍莱尼尔任务，领地背后的托托湖底 火山套：先马厩买药剂进去150（一支60，一支差不多也够了），南部矿区抓十只耐火蜥蜴换衣服省600，鼓隆商店防火服2700 女装：镇上神庙旁触发女装男人，绿洲最高处夸赞他，600买到 防寒套2150 幻影套、盖侬套、蛮族套幻影套：竞技场、祭奠场、海拉鲁驻军遗址 盖侬套：腿，石头底；头，瀑布底；衣服，桥底 蛮族套：三个迷宫神庙宝箱（阿卡莱，黑布拉，荒野格鲁德） 雷龙角刷钱四英杰及英杰之诗、摩托车 风：射4个靶，滑雪，射龙角（早上） 火：石巨人，火山飞翔，站岩浆里 水：早上飞进海里，爬瀑布，打守护者 风：打大沙鱼，盾滑，偷宝珠扔洞里 导师：速攻（时停），分身（电，爆炸箭），巨大（盾反，电） 希卡石板时停升级三个古轴，古代钉，核心 传送阵（阿卡莱）迷宫岛宝箱 城堡武器海利亚盾（牢房解锁，建设一始村）建议白银后SL出144，近卫武器，近卫套装 塔尖有古代箭、呀哈哈 近卫套装警卫室，入口墙内，炸开有宝箱：古代箭 近卫室宝箱裤子 餐厅中门进去直走木门出去 炸开尽头左侧石墙开宝箱衣服 帽子在主殿。 属性武器主城大部分都有 解放四神兽后的竞技场 腐朽的古树和奥尔丁大化石有火剑 远程弓（一心弓格鲁德弓）哈特诺塔附近的据点哨兵 格鲁德军营 背包格子找到伯库林。卡卡利科村的路上，打怪夺回沙锤。 升级两次后，回家，迷路，出现在森林驿站 五次后回家，在科洛格森林 武器1、2、3、5、8、12、17、25、35、45、55。 弓箭1、2、3、5、8、12、17、25。 盾牌1、2、3、4、5、10、10、10、10、10、15、15、15、15、15、20。 共441. 呀哈哈面具快到双火炬的地方 ![image-20200618220255256](D:\\CSlearning\\blog essay\\游\\image-20200618220255256.png) 装备升级![image-20200618214159697](D:\\CSlearning\\blog essay\\游\\image-20200618214159697.png) ![image-20200619203942444](D:\\CSlearning\\blog essay\\游\\image-20200619203942444.png) ![image-20200619204033020](D:\\CSlearning\\blog essay\\游\\image-20200619204033020.png) ![image-20200619204120140](D:\\CSlearning\\blog essay\\游\\image-20200619204120140.png) ![image-20200619204135698](D:\\CSlearning\\blog essay\\游\\image-20200619204135698.png) 回忆 房子、装修、一始村30木柴 4400卢比 一始村：110木柴，南部矿场，卡拉卡拉集市（别女装），利特村，卓拉二层 资源怪物商人阿卡莱骷髅池塘触发 达基基神庙一出来就是（塞拉瀑布，桥底祭祀之枪或老婆枪空中下刺） 驿站商人 旅行商人1 贝黎斯晴天：古代螺丝1 古代弹簧1 古代齿轮1雨天：古代螺丝1 古代弹簧1 古代齿轮1 古代传动轴1 古代核心1 2 帕拉斯加晴天：山羊黄油2 鲜奶2 禽蛋*2雨天：价格下降 3 布古力晴天：精力独角仙1 精力鲈鱼1 精力蘑菇3 精力螃蟹3雨天：毅力蘑菇3 毅力胡萝卜1 毅力蛙*1 4 本戈晴天：兽肉3 高级兽肉1 禽肉3 高级禽肉1 岩盐3雨天：兽肉3 高级兽肉3 顶级兽肉1 高级禽肉1 岩盐3 5 基洛丘晴天：生命松露2 速速胡萝卜3 精力蘑菇3 岩盐5 木箭5雨天：木箭5 速速紫罗兰2 生命松露2 大个生命松露1 岩盐5 6 秋明晴天：椰子5 生命榴莲5 大剑鲷鱼3 铠甲鲷鱼3 精力螃蟹3雨天：椰子5 生命榴莲5 大剑鲷鱼3 铠甲鲷鱼3 生命海螺3 7 康波晴天：兽肉2 速速胡萝卜3 铠甲南瓜3 生命松露2雨天：兽肉3 高级兽肉2 铠甲南瓜3 生命松露2 大个生命松露*1 8 麦茨晴天：高级兽肉2 大剑蘑菇1 暖暖鳟鱼1 速速莲蓬1雨天：顶级兽肉2 铠甲南瓜2 暖暖鳟鱼2 速速莲蓬2 鼓隆的调味粉*1 9 伍德晴天：木箭1 木箭5 火箭1 火箭5雨天：木箭1 木箭10 火箭1 火箭5 冰箭*5 10 姆娅晴天：塔邦达小麦10 海拉鲁米5 山羊黄油5 禽蛋5雨天：塔邦达小麦10 海拉鲁米5 鲜奶10 蔗糖5 鼓隆的调味粉*5 11 艾纳西迈晴天：冰冷蘑菇3 暖暖蘑菇3 酥麻蘑菇3 精力蘑菇1雨/雪天：大剑蘑菇3 铠甲蘑菇3 毅力蘑菇3 生命松露2 大个生命松露*1 12 吉宁（须骑马对话，在骑马演武处）晴天：木箭◊105 木箭◊55 木箭10 炸弹箭5雨天：木箭◊105 木箭◊55 木箭10 电箭5 13 马平由于沙漠与火山均不下雨，故无货物变动暖暖蜻蜓3 冰冷蜻蜓3 14 伽拉顿木箭20 苹果10 橡子10 精力蚱蜢5 15 恰里奥琥珀1 蛋白石1 黄玉1 红宝石1 蓝宝石*1 圣山 补：达拉伊特森林有生命萝卜、独角仙哪里有很多品种的蘑菇、以及冰蝴蝶 初始台地其他资源聚集地爆炸箭刷 火箭森林之塔哨兵 北部矿区火蜥蜴冰秒 冰箭阿卡莱、拉涅尔塔哨兵 电箭城堡神庙三只蜥蜴 BOSS大鲨鱼 剑之试炼初级（扇子斧头） 一层猪猪怪群：直接跳放炸弹（箱子有材料，传送点旁的大树有鸟蛋）【大师：树枝引火烧箱子引过去烧死】 二层火丘丘猪猪据点加箭塔：锁哨兵投矛爆丘丘飞到据点大风车【大师据点有铁锤】 三层丘丘，火丘丘：炸一个，中心大风车砸地群伤，起飞射箭 四层大据点：锁射箭解决二层哨兵，爬梯打怪，飞下去偷袭 五层两只大怪，一个骷髅头据点：炸两个大怪，再爬后面炸火药桶【偷袭，炸】 六层石头人：锤，时停锤 七层：抓一只小精灵，炸树拿大叶子 八层小蜥蜴据点+两只单只蜥蜴：偷袭、大风车 九层两只章鱼一只小电法师：射章鱼，时停打法师 十层三只蜥蜴，一只哨兵，两只高级：马上下水绕右射哨兵，背刺【直冲，锁，爆头秒，偷袭，爬鱼骨可以躲】 十一层两只猪猪哨兵，两只高级猪猪哨兵，大据点：制冰跳射，高级怪捅下水 十二层西诺克斯：随便扔东西 高阶（陨石杖雷杖专注弓斧头） 一层5只猪猪：跳炸，打箱子 二层两只法师，猪猪：爆头秒法师 三层视野共享哨兵，猪猪若干：起跳林克时间解决哨兵，爆炸箭冰箭带上【拿26弓，飞镖，在两猪据点】 四层残废守护者：盾反或者近身射眼打，宝箱骑士盾 五层补给：抓精灵 六层电球，火蝙蝠：射电球，长矛打蝙蝠 七层两只火蜥蜴哨兵，骷髅据点：哨兵蹲下用专注弓冰箭秒，射灯炸补爆炸箭 八层火法师，3只猪猪：绕左爬墙跳林克时间冰箭秒法师，陨石杖快速清怪，骑墙射怪 九层守护者：盾反 十层独眼巨人木护腿 十一层 两个精灵 十二层六只小守护者：制冰挡住围攻 十三层三守护者：陨石杖解决，墙上铁箱后宝箱 十四层四小守护者两中等守护者：制冰一心弓打小守护者，陨石杖或长矛推下水大守护者 十五层两只试炼守护者：陨石杖雷杖 十六层终极守卫者： 终阶（生锈剑骷髅蜥蜴大骨头开瓶器、古代箭，准备十多捆柴，元素武器） 【一段雷雨骷髅怪，二段火山，三段雪山】 一层四只小骷髅：跳炸，长矛捅 二层两电蝙蝠，骷髅据点（三只骨蜥蜴）：炸一只制冰跳射一只，不要炸炸药桶，箱子里有高级肉，地下宝箱近卫剑 三层两只电丘丘，骨蜥蜴：宝箱有 四层骑马小骷髅：平台引怪林克时间射头 五层西诺克斯：开元素剑，地下箱子有冰箭，【骨头插着近卫剑】 六层补给 一只精灵、松露，三发古代箭 七层章鱼，小石头，小火丘丘：吸剑 八层三只火蜥蜴： 九层法师，骷髅据点（2火蜥蜴，大猪）：时停冰剑/冰箭秒法师、蜥蜴【据点里有近卫盾剑】 十层大据点：熔岩里宝箱古代箭，【底层墙角近卫剑】，电剑缴械 十一层石头人：炸开气流口 十二层补给 两只精灵，做抗寒菜，生命萝卜 十三层冰球球，小石头，三只猪：砍柴融冰拿爆炸箭，丘丘冻住猪猪，爆头带走，白银爆头偷袭 十四层冰蜥蜴，大据点：秒哨兵，秒冰蜥蜴。融冰古代箭，古代箭带走黄金大猪 十五层法师，小篝火，白银大猪：时停/爬墙火箭秒法师，古代箭带走黄金猪 十六层石头人：融冰开气流口 十七层人马：古代箭融冰爆炸箭【左边兽神剑】 十八层三只精灵 十九层盾反守护者【激活顺路打】 二十层地面守卫者一只而已 二十一层飞行守卫古代箭射眼睛 二十二层三支箭【守卫型用兽神打，省箭】 二十三速度古代箭秒人马打守卫林克时间清小怪 bug&amp;操作技巧盾跳冰台跳吹哨跑刷血拉弓转回旋五连斩后摇取消布偶跳BTB强制手持无限袭步风弹武器增殖耐久继承","link":"/2021/06/20/zelda%E9%87%8E%E5%90%B9%E5%BC%80%E8%8D%92/"},{"title":"Hello world","text":"这是对博客运行的各方面的测试页面。 Hello! This is my blog. This is just a test. 图片Hexo Icarus内置Justified Gallery，需要使用如下方式插入图片 1{% img /gallery/1.jpg &quot;Image title&quot; %} 或者使用HTML的方式 12345678&lt;div class=&quot;justified-gallery&quot;&gt;&lt;img src=&quot;/gallery/test1.jpg&quot; alt=&quot;1&quot; /&gt;&lt;img src=&quot;/gallery/test2.jpg&quot; alt=&quot;2&quot; /&gt;&lt;img src=&quot;/gallery/test3.jpg&quot; alt=&quot;3&quot; /&gt;&lt;img src=&quot;/gallery/test4.jpg&quot; alt=&quot;4&quot; /&gt;&lt;img src=&quot;/gallery/test5.jpg&quot; alt=&quot;5&quot; /&gt;&lt;img src=&quot;/gallery/test6.jpg&quot; alt=&quot;6&quot; /&gt;&lt;/div&gt; 测试，如何同步文件夹？将根目录改成source 或者使用图床。 1[![RTvTZ8.jpg](https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg)](https://imgtu.com/i/RTvTZ8) #使用图床网站 图床网站 代码12345678910111213141516# Copyright (c) 2021&quot;&quot;&quot;This is just a test for showing code.&quot;&quot;&quot;import osimport sysclass welcome: def __init__(self, date): self.welcome = 1 self.date = date if self.welcome: print('Welcome')def hello(): print(&quot;hello world!&quot;)if __name__ == &quot;__main__&quot;: hello()#---------------------------------------------------------------------------- 无序列表 甲乙丙丁 戊己庚辛 壬 癸 表格 博客 作者 也无风雨也无晴 ivy 图表12345678910111213participant beginparticipant Cparticipant Bparticipant ANote over C: By listing the\\n participants you can\\n change their orderA-&gt;B: horizontal descriptive sentence\\n(normal line)B--&gt;A: dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrowC--&gt;&gt;A:Note right of B: note to the\\n right of BNote over A:note over ANote over A,B: Note over both A and B %% Example with selection of syntaxes gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h HTML以下使用HTML代码写成 参考自 [typora官方文档] [github项目js-sequence-diagrams] [js-sequence-diagrams介绍页] [gantt wiki] [mermaid主页] 链接icarus用户指南 公式需要开启配置文件中的plugins的mathjax。使用TEXTEX语法时，请使用$包裹行内公式，$$包裹块状公式。健壮性很低。在Typora内可以显示，但在网页显示时常出错。也可能是语法比较严格，多写几遍咯。 123456789$$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$$$\\max_{G}V(D,G)=E_{z \\sim P_{z}(z)}[logD(G(z))]\\tag{2-1}$$$ \\theta^*= \\arg \\max_{\\theta}\\prod^{m}_{i=1}{P_G(x^i; \\theta)}$$ \\approx \\arg \\max_{\\theta}\\int_x P_{data}(x)log P_G(x; \\theta)dx- \\int_x P_{data} log P_{data}(x)dx$ $$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$ $$\\max_{G}V(D,G)=E_{z \\sim P_{z}(z)}[logD(G(z))]\\tag{2-1}$$ $ \\theta^*= \\arg \\max_{\\theta}\\prod^{m}_{i=1}{P_G(x^i; \\theta)}$ $ \\approx \\arg \\max_{\\theta}\\int_x P_{data}(x)log P_G(x; \\theta)dx- \\int_x P_{data} log P_{data}(x)dx$ mathjax/LaTex公式格式查找 Typora公式支持文档 音乐使用Aplayer，一个HTML5音乐播放器，GitHub地址。 12345678910111213141516171819202122232425262728293031{% meting &quot;002j785c33YQHT&quot; &quot;tencent&quot; &quot;song&quot; %} #似乎不行呢{% aplayer &quot;一路向北&quot; &quot;Jay&quot; &quot;https://www.ytmp3.cn/down/69847.mp3&quot; &quot;https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg&quot; &quot;autoplay&quot; %} #autoplay还是算了{% aplayerlist %}{ &quot;narrow&quot;: false, // （可选）播放器袖珍风格 &quot;autoplay&quot;: false, // （可选) 自动播放，移动端浏览器暂时不支持此功能 &quot;mode&quot;: &quot;random&quot;, // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' &quot;showlrc&quot;: 3, // （可选）歌词显示配置项，可选项有：1,2,3 &quot;mutex&quot;: false, // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 &quot;theme&quot;: &quot;#e6d0b2&quot;, // （可选）播放器风格色彩设置，默认：#b7daff &quot;preload&quot;: &quot;metadata&quot;, // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto' &quot;listmaxheight&quot;: &quot;513px&quot;, // (可选) 该播放列表的最大长度 &quot;music&quot;: [ { &quot;title&quot;: &quot;可爱女人&quot;, &quot;author&quot;: &quot;Jay&quot;, &quot;url&quot;: &quot;https://www.ytmp3.cn/down/53696.mp3&quot;, &quot;pic&quot;: &quot;https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg&quot;, }, { &quot;title&quot;: &quot;一路向北&quot;, &quot;author&quot;: &quot;Jay&quot;, &quot;url&quot;: &quot;https://www.ytmp3.cn/down/69847.mp3&quot;, &quot;pic&quot;: &quot;https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg&quot;, } ]}{% endaplayerlist %}{% aplayerlist %}{&quot;mode&quot;: &quot;random&quot;,&quot;narrow&quot;:false,&quot;autoplay&quot;: false,&quot;music&quot;: [{&quot;title&quot;: &quot;可爱女人&quot;,&quot;author&quot;: &quot;Jay&quot;,&quot;url&quot;: &quot;https://www.ytmp3.cn/down/53696.mp3&quot;},{&quot;title&quot;: &quot;北&quot;,&quot;author&quot;: &quot;Jay&quot;,&quot;url&quot;: &quot;https://www.ytmp3.cn/down/69847.mp3&quot;}]}{% endaplayerlist %} var ap = new APlayer({ element: document.getElementById(\"aplayer-tUKgXgmR\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"一路向北\", author: \"Jay\", url: \"https://www.ytmp3.cn/down/69847.mp3\", pic: \"https://z3.ax1x.com/2021/07/06/RTvTZ8.jpg\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); var ap = new APlayer({ element: document.getElementById(\"aplayer-cOMXHiYi\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Symphony No1 in C Minor\", author: \"Bruckner\", url: \"/music/Berliner Philharmoniker _ 小澤征爾Symphony No_ 1 in C Minor, WAB 101.mp3\", pic: \"/tn/tn_mao.jpg\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":0,\"mode\":\"random\",\"music\":[{\"title\":\"可爱女人\",\"author\":\"Jay\",\"url\":\"https://www.ytmp3.cn/down/53696.mp3\",\"pic\":\"\"},{\"title\":\"一路向北\",\"author\":\"Jay\",\"url\":\"https://www.ytmp3.cn/down/69847.mp3\",\"pic\":\"\"}]}; options.element = document.getElementById(\"aplayer-eBBmBlwK\"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 音乐外链网站 123456&lt;audio controls&gt; &lt;source src=&quot;https://www.ytmp3.cn/down/53696.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/audio&gt;&lt;audio controls autoplay&gt; &lt;source src=&quot;/music/Berliner Philharmoniker _ 小澤征爾Symphony No_ 1 in C Minor, WAB 101.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/audio&gt; ENDst=>start: Start op_asg=>operation: l=0;h=lenth-1 cond_lh=>condition: loperation: return none op_get=>operation: return g cond_e=>condition: g=a? cond_b=>condition: g>a? op_l=>operation: l=m+1 op_h=>operation: h=m-1 op_g=>operation: g=m e=>end st->op_asg->cond_lh cond_lh(yes)->op_g->cond_e cond_e(no)->cond_b cond_e(yes)->op_get->e cond_b(yes)->op_l->cond_lh cond_b(no)->op_h->cond_lh cond_lh(no)->op_none->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","link":"/2021/06/20/hello/"},{"title":"日麻入门","text":"虽然是个运气游戏，或者说是运七技三的游戏，但还是可以有把控牌型的做法的，合理的做牌方式，可以提高胡牌概率。（蒙特卡洛树云云）作为一个在运气游戏中也希望能够有依据，讲科学地打牌的非洲人（不是魔法少女不适合打麻将啊！），对科学麻将的研究当然十分重要。（毕竟真实麻将里可不会有什么海底捞月、岭上开花的魔法）只有像小和和一样讲科学才能赢！","link":"/2021/07/15/%E6%97%A5%E9%BA%BB%E5%85%A5%E9%97%A8/"},{"title":"HTML简要笔记","text":"了解HTML的基本元素以及属性后，常用的其实也就其中的一些，大体有一个框架性的了解就行了。 写详细的也没必要，教程那么多，超越不了，也不适合自己用，流水账式写完岂不是编字典？不如要用再查。 &lt;head&gt;head元素不在页面中显示，主要内容包含元数据meta，标题title等。 &lt;title&gt;title仅为网页文档添加标题（整个HTML文档），与h1区别，h1为body添加标题。同时，title作为书签的推荐命名以及搜索引擎抓取的搜索结果。 &lt;meta&gt;一般用于指定文档字符编码，&lt;meta charset='utf-8'&gt;等。 还包含name，content特性，指定元素类型以及内容。 12&lt;meta name=&quot;author&quot; content=&quot;Ivy&quot;&gt;&lt;meta name=&quot;description&quot; content=&quot;A front-end note.&quot;&gt; 其中的description可以在搜索引擎中显示。 其他head中常见的还塞了&lt;link&gt;,&lt;script&gt;等，以链接到图表、样式表等等。 页面结构页面语义结构为构建网页布局，一般地，我们需要页眉、导航、正文主体、侧边栏与页脚等页面结构，需要使用一系列明确的标签，如下。 &lt;header&gt;：页眉。 &lt;nav&gt;：导航栏。 &lt;main&gt;：主内容。主内容中还可以有各种子内容区段，可用&lt;article&gt;、&lt;section&gt; 和 &lt;div&gt; 等元素表示。 &lt;aside&gt;：侧边栏，经常嵌套在 &lt;main&gt; 中。 &lt;footer&gt;：页脚。 以下为上述标签的综合实例：当然还要加点CSS的 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Showing how to use HTML for structuring content&lt;/title&gt; &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt;&lt;h1&gt;页眉标题&lt;/h1&gt;&lt;/header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;MDN Web Docs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://validator.w3.org/&quot; title=&quot;检查页面并返回错误报告&quot;&gt;HTML验证服务&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;form&gt; &lt;input type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;要搜索的内容&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;&gt; &lt;/form&gt; &lt;/nav&gt; &lt;main&gt; &lt;article&gt; &lt;h2&gt;定风波·莫听穿林打叶声&lt;/h2&gt; &lt;p&gt;苏轼 〔宋代〕&lt;/p&gt; &lt;p&gt;三月七日，沙湖道中遇雨，雨具先去，同行皆狼狈，余独不觉。已而遂晴，故作此。&lt;br&gt; 莫听穿林打叶声，何妨吟啸且徐行。&lt;br&gt;竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&lt;br&gt; 料峭春风吹酒醒，微冷，山头斜照却相迎。&lt;br&gt;回首向来萧瑟处，归去，也无风雨也无晴。&lt;br&gt;&lt;/p&gt; &lt;/article&gt; &lt;aside&gt; &lt;h3&gt;注释&lt;/h3&gt; &lt;p&gt;宋神宗元丰五年（1082）的三月七日，在沙湖道上...&lt;/p&gt; &lt;/aside&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt; © 我瞎写的 &lt;/p&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; 其他分隔结构 &lt;div&gt; &lt;span&gt; 这两个无语义元素，其中&lt;div&gt;是块级元素，&lt;span&gt;是内联元素（区别：换不换行）。当需要一组元素修饰一些单独的实体以提供CSS与JS的单一响应时，或不需要对修饰实体增加不必要的特定结构含义时，就可以使用了。 &lt;br&gt;，换行元素。 &lt;hr&gt;，插入水平分割线。 文字处理内容上的语义结构完成页面结构的布局后，对其内容在语义上需要进一步分离（如标题，分段等），当然，很多时候通过样式来进行视觉上的区分。尽管我们可以使用&lt;span&gt;等无语义元素加上样式来使内容看上去像特定语义块，但这对整个网页的分析并无益处。 常用文字语义元素 &lt;h1&gt;-&lt;h6&gt;：多级标题。 &lt;p&gt;：段落 &lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;：列表的无序（unordered）、有序(ordered list)以及列表条目。有、无序是可以互相嵌套的，当然，大部分元素都是可以互相嵌套的。 &lt;em&gt;,&lt;strong&gt;：语义强调，斜体强调（语气？）以及粗体特别强调。 &lt;b&gt;,&lt;i&gt;,&lt;u&gt;：一些很旧的元素，用于粗体、斜体和下划线，不记得也没关系的东西，已经不重要了。 一些少用但必要的内容语义结构 &lt;dl&gt;,&lt;dt&gt;,&lt;dd&gt;：描述列表。 1234567&lt;dl&gt; &lt;dt&gt;描述的第一项&lt;/dt&gt; &lt;dd&gt;第一项的描述&lt;/dd&gt; &lt;dt&gt;第二项&lt;/dt&gt; &lt;dd&gt;第二项的描述一&lt;/dd&gt; &lt;dd&gt;第二项的描述二&lt;/dd&gt;&lt;/dl&gt; 描述的第一项 第一项的描述 第二项 第二项的描述一 第二项的描述二 引用及引文，引用有块引用与行引用。 &lt;blockquote&gt;：块引用，包住引用的内容，使用cite属性指向引用的资源。（点不了，指向有啥用？） &lt;q&gt;：同上，只不过是在行内。 缩略，使用&lt;addr&gt;包裹缩略语，在元素内的属性title写缩略的解释。 上下标，使用&lt;sup&gt;和&lt;sub&gt;包裹。 代码块，使用&lt;code&gt;，还有一些更不常用的如：&lt;pre&gt;，&lt;var&gt;，&lt;kbd&gt;，&lt;samp&gt;。 超链接既然是互联网的产物，链接肯定是极其重要的一环。 元素&lt;a&gt;元素&lt;a&gt;的内容在链接解析成功后，作为链接入口。而内容可以不止是文本，嵌套&lt;img&gt;等块级元素也是可以的。 属性： herf属性，包含指向网址。 title属性，补充信息，悬停时显示。 路径使用url统一资源定位符作为位置定义。 上级目录：../xx 子目录：son/xx 文档片段：xx.html#Mailing_address，链接到文档内的特定部分，通过对目标部分的元素分配id属性来标记。 绝对与相对的选取，一般地，多使用相对链接，可以减少浏览器通过DNS的查找，但是要注意，相对链接会随着文档结构的改变而改变。 多媒体图&lt;img&gt;元素 src属性内放置图片路径（绝对/相对）。 alt属性，作为备选内容，在图片不显示时输出。同时作为图片的描述。 width,height：定义大小。 title：悬停提示。 如果需要图（或音视频）搭配文字，可以使用&lt;img&gt;和&lt;p&gt;构建，或使用&lt;figure&gt;和&lt;figcaption&gt;，前者包含整个多媒体流，后者内包裹文本。 音视频&lt;video&gt;与&lt;audio&gt;，但一般使用其他插件。具体见video与audio在MDN上的详细页面。 其他嵌入用的少，不写了，需要再去查iframe,embed,object等等元素。 表格展现数据。实际上也不常用，而且很长很多。但还是要写！我要死了！写这个太无聊了！ 表格使用的元素比较多，&lt;table&gt;,&lt;tr&gt;,&lt;td&gt;,&lt;th&gt;,&lt;col&gt;,&lt;colgroup&gt;,&lt;caption&gt;,&lt;thead&gt;,&lt;tfoot&gt;,&lt;tbody&gt;，还可以嵌套。 一般的属性有colspan,rowspan,span,scope,id,headers。 好吧，一一记录下。 基本结构使用&lt;table&gt;创建表格，&lt;tr&gt;创建每行表格，&lt;td&gt;表示每个格子，格子也可以使用&lt;th&gt;用以表明该格为标题（行/列）。 结构方面，可以在table下使用&lt;caption&gt;来为表格创建标题。也可以使用&lt;thead&gt;,&lt;tfoot&gt;,&lt;tbody&gt;来区分表格结构，元素名字已经不言自明。 修饰属性属性有很多，出去可以通过css样式修饰的之外，主要为了实现表格元素标记和非常规的表格模式。 为跨越多行/列，可以令&lt;td&gt;,&lt;th&gt;的属性colspan,rowspan为一个无单位数值，即可跨越相应的格子数。 为指明&lt;th&gt;是行还是列标题，利用scope属性指明值为row或col甚至复杂表格的rowgroup等。 单元格与标题的联系还可以用id和headers来创造。在&lt;th&gt;中创建唯一的id属性值，在&lt;td&gt;的headers属性中，包含’所有‘属于的标题的id值。 结尾笔记基本上包含了HTML常用的要点。最后，要检查代码，在Markup Validation Service上提交文档即可返回错误报告，一般来说，浏览器都支持宽松的特性，所以瞎写也问题不大。","link":"/2019/10/15/HTML%E7%AE%80%E8%A6%81%E7%AC%94%E8%AE%B0/"},{"title":"Javascript面向对象","text":"Javascript面向对象。原型与闭包，异步等。 面向对象不可能少了面向对象，不过JS的和Java、C、C++的太不一样，不得不写一写。 一些注意： 对象的属性值可以是任何的数据类型，也可以是个函数：（也称之为方法） 对象中的属性值，也可以是一个对象。 对象的值是保存在堆内存中的，而对象的引用（即变量）是保存在栈内存中的。如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响。 对象基础对象的属性、方法的表示法有点表示法和括号表示法两种，区别在于点表示法只能接受字面量的成员的名字，不接受变量作为名字，所以括号表示法不仅可以动态的去设置对象成员的值，还可以动态的去设置成员的名字。 JS的this，关键字this指向了当前代码运行时的对象，当使用构造器动态创建对象时，这可以保证代码上下文改变时变量值的正确性。 基于原型与其他的面向对象语言不太一样，当OOP定义类并以此创建对象实例时，类的属性、方法会被复制到实例中。而JS不进行复制，它通过对象实例与构造器之间的链接，当实例属性被调用，则上溯原型链，找到对应的属性与方法。 这一链接是__proto__属性，由构造函数的prototype属性派生出来的。 构造函数 类似于其他语言中的“类”。 12345678910111213//一个构造函数function Construct(var){ this.var = var; this.reaction = function(){};}//创建实例var example1 = new Construct('hello')//另一种var example2 = new Object();//继承的方式var example3 = Object.create(example1); 原型 函数都有特殊属性：原型prototype 123456789101112131415161718192021222324252627282930313233function sth(){}sth.prototype.add = &quot;thing&quot;;var sthmore = new sth();sthmore.prop = &quot;other&quot;;console.log(&quot;sth.prototype: &quot; + sth.prototype);console.log(&quot;sth.__proto__: &quot; + sth.__proto__);console.log(&quot;sth.__proto__.__proto__: &quot; + sth.__proto__.__proto__);console.log(&quot;sthmore.prototype: &quot; + sthmore.prototype);console.log(&quot;sthmore.__proto__: &quot; + sthmore.__proto__);console.log(&quot;sthmore.__proto__.__proto__: &quot; + sthmore.__proto__.__proto__);console.log(&quot;sthmore.__proto__.__proto__.__proto__: &quot; + sthmore.__proto__.__proto__.__proto__);console.log(&quot;sthmore.prop: &quot; + sthmore.prop);console.log(&quot;sthmore.add: &quot; + sthmore.add);console.log(&quot;sth.prop: &quot; + sth.prop);console.log(&quot;sth.add: &quot; + sth.add);console.log(&quot;sth.prototype.prop: &quot; + sth.prototype.prop);console.log(&quot;sth.prototype.add: &quot; + sth.prototype.add);/*sth.prototype: [object Object]sth.__proto__: function () { [native code] }sth.__proto__.__proto__: [object Object]sthmore.prototype: undefinedsthmore.__proto__: [object Object]sthmore.__proto__.__proto__: [object Object]sthmore.__proto__.__proto__.__proto__: nullsthmore.prop: othersthmore.add: thingsth.prop: undefinedsth.add: undefinedsth.prototype.prop: undefinedsth.prototype.add: thing*/ 先要搞清楚，对象的属性__prototype__的表现与函数的默认属性prototype一致，实际上__prototype__引用了创建该对象的函数（构造函数）的prototype，不过这个对象属性是一个隐藏属性，一般不被希望使用。有了大致的原型认识，再从对象说起。 函数与对象感觉前面写得太乱了，写完后面看看要不要删掉前面好了。 在Javascript中，除去值类型（undefined、number、string、boolean）外的一切都是对象。 那么，函数是对象，而对象是由函数创建的。 异步JS","link":"/2019/10/15/Javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"test","slug":"test","link":"/tags/test/"},{"name":"cs","slug":"cs","link":"/tags/cs/"},{"name":"front-end","slug":"front-end","link":"/tags/front-end/"},{"name":"game","slug":"game","link":"/tags/game/"},{"name":"zelda","slug":"zelda","link":"/tags/zelda/"},{"name":"Jmahjong","slug":"Jmahjong","link":"/tags/Jmahjong/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"cs","slug":"cs","link":"/categories/cs/"},{"name":"front-end","slug":"cs/front-end","link":"/categories/cs/front-end/"},{"name":"game","slug":"game","link":"/categories/game/"},{"name":"zelda","slug":"game/zelda","link":"/categories/game/zelda/"},{"name":"mahjong","slug":"game/mahjong","link":"/categories/game/mahjong/"}]}